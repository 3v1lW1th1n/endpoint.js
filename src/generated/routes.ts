// DO NOT EDIT THIS FILE
import { Url, Headers, EndpointRequestOptions } from "../types";

export interface Routes {
  "DELETE /app/installations/:installation_id": [
    AppsDeleteInstallationEndpoint,
    AppsDeleteInstallationRequestOptions
  ];
  "DELETE /applications/:client_id/grants/:access_token": [
    OauthAuthorizationsRevokeGrantForApplicationEndpoint,
    OauthAuthorizationsRevokeGrantForApplicationRequestOptions
  ];
  "DELETE /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsRevokeAuthorizationForApplicationEndpoint,
    OauthAuthorizationsRevokeAuthorizationForApplicationRequestOptions
  ];
  "DELETE /applications/grants/:grant_id": [
    OauthAuthorizationsDeleteGrantEndpoint,
    OauthAuthorizationsDeleteGrantRequestOptions
  ];
  "DELETE /authorizations/:authorization_id": [
    OauthAuthorizationsDeleteAuthorizationEndpoint,
    OauthAuthorizationsDeleteAuthorizationRequestOptions
  ];
  "DELETE /gists/:gist_id": [GistsDeleteEndpoint, GistsDeleteRequestOptions];
  "DELETE /gists/:gist_id/comments/:comment_id": [
    GistsDeleteCommentEndpoint,
    GistsDeleteCommentRequestOptions
  ];
  "DELETE /gists/:gist_id/star": [
    GistsUnstarEndpoint,
    GistsUnstarRequestOptions
  ];
  "DELETE /notifications/threads/:thread_id/subscription": [
    ActivityDeleteThreadSubscriptionEndpoint,
    ActivityDeleteThreadSubscriptionRequestOptions
  ];
  "DELETE /orgs/:org/blocks/:username": [
    OrgsUnblockUserEndpoint,
    OrgsUnblockUserRequestOptions
  ];
  "DELETE /orgs/:org/credential-authorizations/:credential_id": [
    OrgsRemoveCredentialAuthorizationEndpoint,
    OrgsRemoveCredentialAuthorizationRequestOptions
  ];
  "DELETE /orgs/:org/hooks/:hook_id": [
    OrgsDeleteHookEndpoint,
    OrgsDeleteHookRequestOptions
  ];
  "DELETE /orgs/:org/interaction-limits": [
    InteractionsRemoveRestrictionsForOrgEndpoint,
    InteractionsRemoveRestrictionsForOrgRequestOptions
  ];
  "DELETE /orgs/:org/members/:username": [
    OrgsRemoveMemberEndpoint,
    OrgsRemoveMemberRequestOptions
  ];
  "DELETE /orgs/:org/memberships/:username": [
    OrgsRemoveMembershipEndpoint,
    OrgsRemoveMembershipRequestOptions
  ];
  "DELETE /orgs/:org/migrations/:migration_id/archive": [
    MigrationsDeleteArchiveForOrgEndpoint,
    MigrationsDeleteArchiveForOrgRequestOptions
  ];
  "DELETE /orgs/:org/migrations/:migration_id/repos/:repo_name/lock": [
    MigrationsUnlockRepoForOrgEndpoint,
    MigrationsUnlockRepoForOrgRequestOptions
  ];
  "DELETE /orgs/:org/outside_collaborators/:username": [
    OrgsRemoveOutsideCollaboratorEndpoint,
    OrgsRemoveOutsideCollaboratorRequestOptions
  ];
  "DELETE /orgs/:org/public_members/:username": [
    OrgsConcealMembershipEndpoint,
    OrgsConcealMembershipRequestOptions
  ];
  "DELETE /projects/:project_id": [
    ProjectsDeleteEndpoint,
    ProjectsDeleteRequestOptions
  ];
  "DELETE /projects/:project_id/collaborators/:username": [
    ProjectsRemoveCollaboratorEndpoint,
    ProjectsRemoveCollaboratorRequestOptions
  ];
  "DELETE /projects/columns/:column_id": [
    ProjectsDeleteColumnEndpoint,
    ProjectsDeleteColumnRequestOptions
  ];
  "DELETE /projects/columns/cards/:card_id": [
    ProjectsDeleteCardEndpoint,
    ProjectsDeleteCardRequestOptions
  ];
  "DELETE /reactions/:reaction_id": [
    ReactionsDeleteEndpoint,
    ReactionsDeleteRequestOptions
  ];
  "DELETE /repos/:owner/:repo": [
    ReposDeleteEndpoint,
    ReposDeleteRequestOptions
  ];
  "DELETE /repos/:owner/:repo/automated-security-fixes": [
    ReposDisableAutomatedSecurityFixesEndpoint,
    ReposDisableAutomatedSecurityFixesRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection": [
    ReposRemoveBranchProtectionEndpoint,
    ReposRemoveBranchProtectionRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposRemoveProtectedBranchAdminEnforcementEndpoint,
    ReposRemoveProtectedBranchAdminEnforcementRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposRemoveProtectedBranchPullRequestReviewEnforcementEndpoint,
    ReposRemoveProtectedBranchPullRequestReviewEnforcementRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposRemoveProtectedBranchRequiredSignaturesEndpoint,
    ReposRemoveProtectedBranchRequiredSignaturesRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposRemoveProtectedBranchRequiredStatusChecksEndpoint,
    ReposRemoveProtectedBranchRequiredStatusChecksRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposRemoveProtectedBranchRequiredStatusChecksContextsEndpoint,
    ReposRemoveProtectedBranchRequiredStatusChecksContextsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions": [
    ReposRemoveProtectedBranchRestrictionsEndpoint,
    ReposRemoveProtectedBranchRestrictionsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [
    ReposRemoveProtectedBranchAppRestrictionsEndpoint,
    ReposRemoveProtectedBranchAppRestrictionsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposRemoveProtectedBranchTeamRestrictionsEndpoint,
    ReposRemoveProtectedBranchTeamRestrictionsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposRemoveProtectedBranchUserRestrictionsEndpoint,
    ReposRemoveProtectedBranchUserRestrictionsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/collaborators/:username": [
    ReposRemoveCollaboratorEndpoint,
    ReposRemoveCollaboratorRequestOptions
  ];
  "DELETE /repos/:owner/:repo/comments/:comment_id": [
    ReposDeleteCommitCommentEndpoint,
    ReposDeleteCommitCommentRequestOptions
  ];
  "DELETE /repos/:owner/:repo/contents/:path": [
    ReposDeleteFileEndpoint,
    ReposDeleteFileRequestOptions
  ];
  "DELETE /repos/:owner/:repo/downloads/:download_id": [
    ReposDeleteDownloadEndpoint,
    ReposDeleteDownloadRequestOptions
  ];
  "DELETE /repos/:owner/:repo/git/refs/:ref": [
    GitDeleteRefEndpoint,
    GitDeleteRefRequestOptions
  ];
  "DELETE /repos/:owner/:repo/hooks/:hook_id": [
    ReposDeleteHookEndpoint,
    ReposDeleteHookRequestOptions
  ];
  "DELETE /repos/:owner/:repo/import": [
    MigrationsCancelImportEndpoint,
    MigrationsCancelImportRequestOptions
  ];
  "DELETE /repos/:owner/:repo/interaction-limits": [
    InteractionsRemoveRestrictionsForRepoEndpoint,
    InteractionsRemoveRestrictionsForRepoRequestOptions
  ];
  "DELETE /repos/:owner/:repo/invitations/:invitation_id": [
    ReposDeleteInvitationEndpoint,
    ReposDeleteInvitationRequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/assignees": [
    IssuesRemoveAssigneesEndpoint,
    IssuesRemoveAssigneesRequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesRemoveLabelsEndpoint,
    IssuesRemoveLabelsRequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels/:name": [
    IssuesRemoveLabelEndpoint,
    IssuesRemoveLabelRequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/lock": [
    IssuesUnlockEndpoint,
    IssuesUnlockRequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesDeleteCommentEndpoint,
    IssuesDeleteCommentRequestOptions
  ];
  "DELETE /repos/:owner/:repo/keys/:key_id": [
    ReposRemoveDeployKeyEndpoint,
    ReposRemoveDeployKeyRequestOptions
  ];
  "DELETE /repos/:owner/:repo/labels/:name": [
    IssuesDeleteLabelEndpoint,
    IssuesDeleteLabelRequestOptions
  ];
  "DELETE /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesDeleteMilestoneEndpoint,
    IssuesDeleteMilestoneRequestOptions
  ];
  "DELETE /repos/:owner/:repo/pages": [
    ReposDisablePagesSiteEndpoint,
    ReposDisablePagesSiteRequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsDeleteReviewRequestEndpoint,
    PullsDeleteReviewRequestRequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsDeletePendingReviewEndpoint,
    PullsDeletePendingReviewRequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsDeleteCommentEndpoint,
    PullsDeleteCommentRequestOptions
  ];
  "DELETE /repos/:owner/:repo/releases/:release_id": [
    ReposDeleteReleaseEndpoint,
    ReposDeleteReleaseRequestOptions
  ];
  "DELETE /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposDeleteReleaseAssetEndpoint,
    ReposDeleteReleaseAssetRequestOptions
  ];
  "DELETE /repos/:owner/:repo/subscription": [
    ActivityDeleteRepoSubscriptionEndpoint,
    ActivityDeleteRepoSubscriptionRequestOptions
  ];
  "DELETE /repos/:owner/:repo/vulnerability-alerts": [
    ReposDisableVulnerabilityAlertsEndpoint,
    ReposDisableVulnerabilityAlertsRequestOptions
  ];
  "DELETE /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimRemoveUserFromOrgEndpoint,
    ScimRemoveUserFromOrgRequestOptions
  ];
  "DELETE /teams/:team_id": [TeamsDeleteEndpoint, TeamsDeleteRequestOptions];
  "DELETE /teams/:team_id/discussions/:discussion_number": [
    TeamsDeleteDiscussionEndpoint,
    TeamsDeleteDiscussionRequestOptions
  ];
  "DELETE /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsDeleteDiscussionCommentEndpoint,
    TeamsDeleteDiscussionCommentRequestOptions
  ];
  "DELETE /teams/:team_id/members/:username": [
    TeamsRemoveMemberEndpoint,
    TeamsRemoveMemberRequestOptions
  ];
  "DELETE /teams/:team_id/memberships/:username": [
    TeamsRemoveMembershipEndpoint,
    TeamsRemoveMembershipRequestOptions
  ];
  "DELETE /teams/:team_id/projects/:project_id": [
    TeamsRemoveProjectEndpoint,
    TeamsRemoveProjectRequestOptions
  ];
  "DELETE /teams/:team_id/repos/:owner/:repo": [
    TeamsRemoveRepoEndpoint,
    TeamsRemoveRepoRequestOptions
  ];
  "DELETE /user/blocks/:username": [
    UsersUnblockEndpoint,
    UsersUnblockRequestOptions
  ];
  "DELETE /user/emails": [
    UsersDeleteEmailsEndpoint,
    UsersDeleteEmailsRequestOptions
  ];
  "DELETE /user/following/:username": [
    UsersUnfollowEndpoint,
    UsersUnfollowRequestOptions
  ];
  "DELETE /user/gpg_keys/:gpg_key_id": [
    UsersDeleteGpgKeyEndpoint,
    UsersDeleteGpgKeyRequestOptions
  ];
  "DELETE /user/installations/:installation_id/repositories/:repository_id": [
    AppsRemoveRepoFromInstallationEndpoint,
    AppsRemoveRepoFromInstallationRequestOptions
  ];
  "DELETE /user/keys/:key_id": [
    UsersDeletePublicKeyEndpoint,
    UsersDeletePublicKeyRequestOptions
  ];
  "DELETE /user/migrations/:migration_id/archive": [
    MigrationsDeleteArchiveForAuthenticatedUserEndpoint,
    MigrationsDeleteArchiveForAuthenticatedUserRequestOptions
  ];
  "DELETE /user/migrations/:migration_id/repos/:repo_name/lock": [
    MigrationsUnlockRepoForAuthenticatedUserEndpoint,
    MigrationsUnlockRepoForAuthenticatedUserRequestOptions
  ];
  "DELETE /user/repository_invitations/:invitation_id": [
    ReposDeclineInvitationEndpoint,
    ReposDeclineInvitationRequestOptions
  ];
  "DELETE /user/starred/:owner/:repo": [
    ActivityUnstarRepoEndpoint,
    ActivityUnstarRepoRequestOptions
  ];
  "DELETE /user/subscriptions/:owner/:repo": [
    ActivityStopWatchingRepoLegacyEndpoint,
    ActivityStopWatchingRepoLegacyRequestOptions
  ];
  "GET /app": [
    AppsGetAuthenticatedEndpoint,
    AppsGetAuthenticatedRequestOptions
  ];
  "GET /app/installations": [
    AppsListInstallationsEndpoint,
    AppsListInstallationsRequestOptions
  ];
  "GET /app/installations/:installation_id": [
    AppsGetInstallationEndpoint,
    AppsGetInstallationRequestOptions
  ];
  "GET /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsCheckAuthorizationEndpoint,
    OauthAuthorizationsCheckAuthorizationRequestOptions
  ];
  "GET /applications/grants": [
    OauthAuthorizationsListGrantsEndpoint,
    OauthAuthorizationsListGrantsRequestOptions
  ];
  "GET /applications/grants/:grant_id": [
    OauthAuthorizationsGetGrantEndpoint,
    OauthAuthorizationsGetGrantRequestOptions
  ];
  "GET /apps/:app_slug": [AppsGetBySlugEndpoint, AppsGetBySlugRequestOptions];
  "GET /authorizations": [
    OauthAuthorizationsListAuthorizationsEndpoint,
    OauthAuthorizationsListAuthorizationsRequestOptions
  ];
  "GET /authorizations/:authorization_id": [
    OauthAuthorizationsGetAuthorizationEndpoint,
    OauthAuthorizationsGetAuthorizationRequestOptions
  ];
  "GET /codes_of_conduct": [
    CodesOfConductListConductCodesEndpoint,
    CodesOfConductListConductCodesRequestOptions
  ];
  "GET /codes_of_conduct/:key": [
    CodesOfConductGetConductCodeEndpoint,
    CodesOfConductGetConductCodeRequestOptions
  ];
  "GET /emojis": [EmojisGetEndpoint, EmojisGetRequestOptions];
  "GET /events": [
    ActivityListPublicEventsEndpoint,
    ActivityListPublicEventsRequestOptions
  ];
  "GET /feeds": [ActivityListFeedsEndpoint, ActivityListFeedsRequestOptions];
  "GET /gists": [GistsListEndpoint, GistsListRequestOptions];
  "GET /gists/:gist_id": [GistsGetEndpoint, GistsGetRequestOptions];
  "GET /gists/:gist_id/:sha": [
    GistsGetRevisionEndpoint,
    GistsGetRevisionRequestOptions
  ];
  "GET /gists/:gist_id/comments": [
    GistsListCommentsEndpoint,
    GistsListCommentsRequestOptions
  ];
  "GET /gists/:gist_id/comments/:comment_id": [
    GistsGetCommentEndpoint,
    GistsGetCommentRequestOptions
  ];
  "GET /gists/:gist_id/commits": [
    GistsListCommitsEndpoint,
    GistsListCommitsRequestOptions
  ];
  "GET /gists/:gist_id/forks": [
    GistsListForksEndpoint,
    GistsListForksRequestOptions
  ];
  "GET /gists/:gist_id/star": [
    GistsCheckIsStarredEndpoint,
    GistsCheckIsStarredRequestOptions
  ];
  "GET /gists/public": [GistsListPublicEndpoint, GistsListPublicRequestOptions];
  "GET /gists/starred": [
    GistsListStarredEndpoint,
    GistsListStarredRequestOptions
  ];
  "GET /gitignore/templates": [
    GitignoreListTemplatesEndpoint,
    GitignoreListTemplatesRequestOptions
  ];
  "GET /gitignore/templates/:name": [
    GitignoreGetTemplateEndpoint,
    GitignoreGetTemplateRequestOptions
  ];
  "GET /installation/repositories": [
    AppsListReposEndpoint,
    AppsListReposRequestOptions
  ];
  "GET /issues": [IssuesListEndpoint, IssuesListRequestOptions];
  "GET /legacy/issues/search/:owner/:repository/:state/:keyword": [
    SearchIssuesLegacyEndpoint,
    SearchIssuesLegacyRequestOptions
  ];
  "GET /legacy/repos/search/:keyword": [
    SearchReposLegacyEndpoint,
    SearchReposLegacyRequestOptions
  ];
  "GET /legacy/user/email/:email": [
    SearchEmailLegacyEndpoint,
    SearchEmailLegacyRequestOptions
  ];
  "GET /legacy/user/search/:keyword": [
    SearchUsersLegacyEndpoint,
    SearchUsersLegacyRequestOptions
  ];
  "GET /licenses": [
    LicensesListCommonlyUsedEndpoint | LicensesListEndpoint,
    LicensesListCommonlyUsedRequestOptions | LicensesListRequestOptions
  ];
  "GET /licenses/:license": [LicensesGetEndpoint, LicensesGetRequestOptions];
  "GET /marketplace_listing/accounts/:account_id": [
    AppsCheckAccountIsAssociatedWithAnyEndpoint,
    AppsCheckAccountIsAssociatedWithAnyRequestOptions
  ];
  "GET /marketplace_listing/plans": [
    AppsListPlansEndpoint,
    AppsListPlansRequestOptions
  ];
  "GET /marketplace_listing/plans/:plan_id/accounts": [
    AppsListAccountsUserOrOrgOnPlanEndpoint,
    AppsListAccountsUserOrOrgOnPlanRequestOptions
  ];
  "GET /marketplace_listing/stubbed/accounts/:account_id": [
    AppsCheckAccountIsAssociatedWithAnyStubbedEndpoint,
    AppsCheckAccountIsAssociatedWithAnyStubbedRequestOptions
  ];
  "GET /marketplace_listing/stubbed/plans": [
    AppsListPlansStubbedEndpoint,
    AppsListPlansStubbedRequestOptions
  ];
  "GET /marketplace_listing/stubbed/plans/:plan_id/accounts": [
    AppsListAccountsUserOrOrgOnPlanStubbedEndpoint,
    AppsListAccountsUserOrOrgOnPlanStubbedRequestOptions
  ];
  "GET /meta": [MetaGetEndpoint, MetaGetRequestOptions];
  "GET /networks/:owner/:repo/events": [
    ActivityListPublicEventsForRepoNetworkEndpoint,
    ActivityListPublicEventsForRepoNetworkRequestOptions
  ];
  "GET /notifications": [
    ActivityListNotificationsEndpoint,
    ActivityListNotificationsRequestOptions
  ];
  "GET /notifications/threads/:thread_id": [
    ActivityGetThreadEndpoint,
    ActivityGetThreadRequestOptions
  ];
  "GET /notifications/threads/:thread_id/subscription": [
    ActivityGetThreadSubscriptionEndpoint,
    ActivityGetThreadSubscriptionRequestOptions
  ];
  "GET /organizations": [OrgsListEndpoint, OrgsListRequestOptions];
  "GET /orgs/:org": [OrgsGetEndpoint, OrgsGetRequestOptions];
  "GET /orgs/:org/blocks": [
    OrgsListBlockedUsersEndpoint,
    OrgsListBlockedUsersRequestOptions
  ];
  "GET /orgs/:org/blocks/:username": [
    OrgsCheckBlockedUserEndpoint,
    OrgsCheckBlockedUserRequestOptions
  ];
  "GET /orgs/:org/credential-authorizations": [
    OrgsListCredentialAuthorizationsEndpoint,
    OrgsListCredentialAuthorizationsRequestOptions
  ];
  "GET /orgs/:org/events": [
    ActivityListPublicEventsForOrgEndpoint,
    ActivityListPublicEventsForOrgRequestOptions
  ];
  "GET /orgs/:org/hooks": [OrgsListHooksEndpoint, OrgsListHooksRequestOptions];
  "GET /orgs/:org/hooks/:hook_id": [
    OrgsGetHookEndpoint,
    OrgsGetHookRequestOptions
  ];
  "GET /orgs/:org/installation": [
    AppsGetOrgInstallationEndpoint | AppsFindOrgInstallationEndpoint,
    AppsGetOrgInstallationRequestOptions | AppsFindOrgInstallationRequestOptions
  ];
  "GET /orgs/:org/interaction-limits": [
    InteractionsGetRestrictionsForOrgEndpoint,
    InteractionsGetRestrictionsForOrgRequestOptions
  ];
  "GET /orgs/:org/invitations": [
    OrgsListPendingInvitationsEndpoint,
    OrgsListPendingInvitationsRequestOptions
  ];
  "GET /orgs/:org/invitations/:invitation_id/teams": [
    OrgsListInvitationTeamsEndpoint,
    OrgsListInvitationTeamsRequestOptions
  ];
  "GET /orgs/:org/issues": [
    IssuesListForOrgEndpoint,
    IssuesListForOrgRequestOptions
  ];
  "GET /orgs/:org/members": [
    OrgsListMembersEndpoint,
    OrgsListMembersRequestOptions
  ];
  "GET /orgs/:org/members/:username": [
    OrgsCheckMembershipEndpoint,
    OrgsCheckMembershipRequestOptions
  ];
  "GET /orgs/:org/memberships/:username": [
    OrgsGetMembershipEndpoint,
    OrgsGetMembershipRequestOptions
  ];
  "GET /orgs/:org/migrations": [
    MigrationsListForOrgEndpoint,
    MigrationsListForOrgRequestOptions
  ];
  "GET /orgs/:org/migrations/:migration_id": [
    MigrationsGetStatusForOrgEndpoint,
    MigrationsGetStatusForOrgRequestOptions
  ];
  "GET /orgs/:org/migrations/:migration_id/archive": [
    MigrationsGetArchiveForOrgEndpoint,
    MigrationsGetArchiveForOrgRequestOptions
  ];
  "GET /orgs/:org/outside_collaborators": [
    OrgsListOutsideCollaboratorsEndpoint,
    OrgsListOutsideCollaboratorsRequestOptions
  ];
  "GET /orgs/:org/projects": [
    ProjectsListForOrgEndpoint,
    ProjectsListForOrgRequestOptions
  ];
  "GET /orgs/:org/public_members": [
    OrgsListPublicMembersEndpoint,
    OrgsListPublicMembersRequestOptions
  ];
  "GET /orgs/:org/public_members/:username": [
    OrgsCheckPublicMembershipEndpoint,
    OrgsCheckPublicMembershipRequestOptions
  ];
  "GET /orgs/:org/repos": [
    ReposListForOrgEndpoint,
    ReposListForOrgRequestOptions
  ];
  "GET /orgs/:org/team-sync/groups": [
    TeamsListIdPGroupsForOrgEndpoint,
    TeamsListIdPGroupsForOrgRequestOptions
  ];
  "GET /orgs/:org/teams": [TeamsListEndpoint, TeamsListRequestOptions];
  "GET /orgs/:org/teams/:team_slug": [
    TeamsGetByNameEndpoint,
    TeamsGetByNameRequestOptions
  ];
  "GET /projects/:project_id": [ProjectsGetEndpoint, ProjectsGetRequestOptions];
  "GET /projects/:project_id/collaborators": [
    ProjectsListCollaboratorsEndpoint,
    ProjectsListCollaboratorsRequestOptions
  ];
  "GET /projects/:project_id/collaborators/:username/permission": [
    ProjectsReviewUserPermissionLevelEndpoint,
    ProjectsReviewUserPermissionLevelRequestOptions
  ];
  "GET /projects/:project_id/columns": [
    ProjectsListColumnsEndpoint,
    ProjectsListColumnsRequestOptions
  ];
  "GET /projects/columns/:column_id": [
    ProjectsGetColumnEndpoint,
    ProjectsGetColumnRequestOptions
  ];
  "GET /projects/columns/:column_id/cards": [
    ProjectsListCardsEndpoint,
    ProjectsListCardsRequestOptions
  ];
  "GET /projects/columns/cards/:card_id": [
    ProjectsGetCardEndpoint,
    ProjectsGetCardRequestOptions
  ];
  "GET /rate_limit": [RateLimitGetEndpoint, RateLimitGetRequestOptions];
  "GET /repos/:owner/:repo": [ReposGetEndpoint, ReposGetRequestOptions];
  "GET /repos/:owner/:repo/:archive_format/:ref": [
    ReposGetArchiveLinkEndpoint,
    ReposGetArchiveLinkRequestOptions
  ];
  "GET /repos/:owner/:repo/assignees": [
    IssuesListAssigneesEndpoint,
    IssuesListAssigneesRequestOptions
  ];
  "GET /repos/:owner/:repo/assignees/:assignee": [
    IssuesCheckAssigneeEndpoint,
    IssuesCheckAssigneeRequestOptions
  ];
  "GET /repos/:owner/:repo/branches": [
    ReposListBranchesEndpoint,
    ReposListBranchesRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch": [
    ReposGetBranchEndpoint,
    ReposGetBranchRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection": [
    ReposGetBranchProtectionEndpoint,
    ReposGetBranchProtectionRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposGetProtectedBranchAdminEnforcementEndpoint,
    ReposGetProtectedBranchAdminEnforcementRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposGetProtectedBranchPullRequestReviewEnforcementEndpoint,
    ReposGetProtectedBranchPullRequestReviewEnforcementRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposGetProtectedBranchRequiredSignaturesEndpoint,
    ReposGetProtectedBranchRequiredSignaturesRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposGetProtectedBranchRequiredStatusChecksEndpoint,
    ReposGetProtectedBranchRequiredStatusChecksRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposListProtectedBranchRequiredStatusChecksContextsEndpoint,
    ReposListProtectedBranchRequiredStatusChecksContextsRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions": [
    ReposGetProtectedBranchRestrictionsEndpoint,
    ReposGetProtectedBranchRestrictionsRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [

      | ReposGetAppsWithAccessToProtectedBranchEndpoint
      | ReposListAppsWithAccessToProtectedBranchEndpoint,

      | ReposGetAppsWithAccessToProtectedBranchRequestOptions
      | ReposListAppsWithAccessToProtectedBranchRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [

      | ReposGetTeamsWithAccessToProtectedBranchEndpoint
      | ReposListProtectedBranchTeamRestrictionsEndpoint
      | ReposListTeamsWithAccessToProtectedBranchEndpoint,

      | ReposGetTeamsWithAccessToProtectedBranchRequestOptions
      | ReposListProtectedBranchTeamRestrictionsRequestOptions
      | ReposListTeamsWithAccessToProtectedBranchRequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [

      | ReposGetUsersWithAccessToProtectedBranchEndpoint
      | ReposListProtectedBranchUserRestrictionsEndpoint
      | ReposListUsersWithAccessToProtectedBranchEndpoint,

      | ReposGetUsersWithAccessToProtectedBranchRequestOptions
      | ReposListProtectedBranchUserRestrictionsRequestOptions
      | ReposListUsersWithAccessToProtectedBranchRequestOptions
  ];
  "GET /repos/:owner/:repo/check-runs/:check_run_id": [
    ChecksGetEndpoint,
    ChecksGetRequestOptions
  ];
  "GET /repos/:owner/:repo/check-runs/:check_run_id/annotations": [
    ChecksListAnnotationsEndpoint,
    ChecksListAnnotationsRequestOptions
  ];
  "GET /repos/:owner/:repo/check-suites/:check_suite_id": [
    ChecksGetSuiteEndpoint,
    ChecksGetSuiteRequestOptions
  ];
  "GET /repos/:owner/:repo/check-suites/:check_suite_id/check-runs": [
    ChecksListForSuiteEndpoint,
    ChecksListForSuiteRequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators": [
    ReposListCollaboratorsEndpoint,
    ReposListCollaboratorsRequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators/:username": [
    ReposCheckCollaboratorEndpoint,
    ReposCheckCollaboratorRequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators/:username/permission": [
    ReposGetCollaboratorPermissionLevelEndpoint,
    ReposGetCollaboratorPermissionLevelRequestOptions
  ];
  "GET /repos/:owner/:repo/comments": [
    ReposListCommitCommentsEndpoint,
    ReposListCommitCommentsRequestOptions
  ];
  "GET /repos/:owner/:repo/comments/:comment_id": [
    ReposGetCommitCommentEndpoint,
    ReposGetCommitCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/comments/:comment_id/reactions": [
    ReactionsListForCommitCommentEndpoint,
    ReactionsListForCommitCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/commits": [
    ReposListCommitsEndpoint,
    ReposListCommitsRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha/branches-where-head": [
    ReposListBranchesForHeadCommitEndpoint,
    ReposListBranchesForHeadCommitRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha/comments": [
    ReposListCommentsForCommitEndpoint,
    ReposListCommentsForCommitRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha/pulls": [
    ReposListPullRequestsAssociatedWithCommitEndpoint,
    ReposListPullRequestsAssociatedWithCommitRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref": [
    ReposGetCommitEndpoint,
    ReposGetCommitRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/check-runs": [
    ChecksListForRefEndpoint,
    ChecksListForRefRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/check-suites": [
    ChecksListSuitesForRefEndpoint,
    ChecksListSuitesForRefRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/status": [
    ReposGetCombinedStatusForRefEndpoint,
    ReposGetCombinedStatusForRefRequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/statuses": [
    ReposListStatusesForRefEndpoint,
    ReposListStatusesForRefRequestOptions
  ];
  "GET /repos/:owner/:repo/community/code_of_conduct": [
    CodesOfConductGetForRepoEndpoint,
    CodesOfConductGetForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/community/profile": [
    ReposRetrieveCommunityProfileMetricsEndpoint,
    ReposRetrieveCommunityProfileMetricsRequestOptions
  ];
  "GET /repos/:owner/:repo/compare/:base...:head": [
    ReposCompareCommitsEndpoint,
    ReposCompareCommitsRequestOptions
  ];
  "GET /repos/:owner/:repo/contents/:path": [
    ReposGetContentsEndpoint,
    ReposGetContentsRequestOptions
  ];
  "GET /repos/:owner/:repo/contributors": [
    ReposListContributorsEndpoint,
    ReposListContributorsRequestOptions
  ];
  "GET /repos/:owner/:repo/deployments": [
    ReposListDeploymentsEndpoint,
    ReposListDeploymentsRequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id": [
    ReposGetDeploymentEndpoint,
    ReposGetDeploymentRequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses": [
    ReposListDeploymentStatusesEndpoint,
    ReposListDeploymentStatusesRequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id": [
    ReposGetDeploymentStatusEndpoint,
    ReposGetDeploymentStatusRequestOptions
  ];
  "GET /repos/:owner/:repo/downloads": [
    ReposListDownloadsEndpoint,
    ReposListDownloadsRequestOptions
  ];
  "GET /repos/:owner/:repo/downloads/:download_id": [
    ReposGetDownloadEndpoint,
    ReposGetDownloadRequestOptions
  ];
  "GET /repos/:owner/:repo/events": [
    ActivityListRepoEventsEndpoint,
    ActivityListRepoEventsRequestOptions
  ];
  "GET /repos/:owner/:repo/forks": [
    ReposListForksEndpoint,
    ReposListForksRequestOptions
  ];
  "GET /repos/:owner/:repo/git/blobs/:file_sha": [
    GitGetBlobEndpoint,
    GitGetBlobRequestOptions
  ];
  "GET /repos/:owner/:repo/git/commits/:commit_sha": [
    GitGetCommitEndpoint,
    GitGetCommitRequestOptions
  ];
  "GET /repos/:owner/:repo/git/matching-refs/:ref": [
    GitListMatchingRefsEndpoint,
    GitListMatchingRefsRequestOptions
  ];
  "GET /repos/:owner/:repo/git/ref/:ref": [
    GitGetRefEndpoint,
    GitGetRefRequestOptions
  ];
  "GET /repos/:owner/:repo/git/tags/:tag_sha": [
    GitGetTagEndpoint,
    GitGetTagRequestOptions
  ];
  "GET /repos/:owner/:repo/git/trees/:tree_sha": [
    GitGetTreeEndpoint,
    GitGetTreeRequestOptions
  ];
  "GET /repos/:owner/:repo/hooks": [
    ReposListHooksEndpoint,
    ReposListHooksRequestOptions
  ];
  "GET /repos/:owner/:repo/hooks/:hook_id": [
    ReposGetHookEndpoint,
    ReposGetHookRequestOptions
  ];
  "GET /repos/:owner/:repo/import": [
    MigrationsGetImportProgressEndpoint,
    MigrationsGetImportProgressRequestOptions
  ];
  "GET /repos/:owner/:repo/import/authors": [
    MigrationsGetCommitAuthorsEndpoint,
    MigrationsGetCommitAuthorsRequestOptions
  ];
  "GET /repos/:owner/:repo/import/large_files": [
    MigrationsGetLargeFilesEndpoint,
    MigrationsGetLargeFilesRequestOptions
  ];
  "GET /repos/:owner/:repo/installation": [
    AppsGetRepoInstallationEndpoint | AppsFindRepoInstallationEndpoint,

      | AppsGetRepoInstallationRequestOptions
      | AppsFindRepoInstallationRequestOptions
  ];
  "GET /repos/:owner/:repo/interaction-limits": [
    InteractionsGetRestrictionsForRepoEndpoint,
    InteractionsGetRestrictionsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/invitations": [
    ReposListInvitationsEndpoint,
    ReposListInvitationsRequestOptions
  ];
  "GET /repos/:owner/:repo/issues": [
    IssuesListForRepoEndpoint,
    IssuesListForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number": [
    IssuesGetEndpoint,
    IssuesGetRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/comments": [
    IssuesListCommentsEndpoint,
    IssuesListCommentsRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/events": [
    IssuesListEventsEndpoint,
    IssuesListEventsRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesListLabelsOnIssueEndpoint,
    IssuesListLabelsOnIssueRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/reactions": [
    ReactionsListForIssueEndpoint,
    ReactionsListForIssueRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/timeline": [
    IssuesListEventsForTimelineEndpoint,
    IssuesListEventsForTimelineRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments": [
    IssuesListCommentsForRepoEndpoint,
    IssuesListCommentsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesGetCommentEndpoint,
    IssuesGetCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments/:comment_id/reactions": [
    ReactionsListForIssueCommentEndpoint,
    ReactionsListForIssueCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/events": [
    IssuesListEventsForRepoEndpoint,
    IssuesListEventsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/issues/events/:event_id": [
    IssuesGetEventEndpoint,
    IssuesGetEventRequestOptions
  ];
  "GET /repos/:owner/:repo/keys": [
    ReposListDeployKeysEndpoint,
    ReposListDeployKeysRequestOptions
  ];
  "GET /repos/:owner/:repo/keys/:key_id": [
    ReposGetDeployKeyEndpoint,
    ReposGetDeployKeyRequestOptions
  ];
  "GET /repos/:owner/:repo/labels": [
    IssuesListLabelsForRepoEndpoint,
    IssuesListLabelsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/labels/:name": [
    IssuesGetLabelEndpoint,
    IssuesGetLabelRequestOptions
  ];
  "GET /repos/:owner/:repo/languages": [
    ReposListLanguagesEndpoint,
    ReposListLanguagesRequestOptions
  ];
  "GET /repos/:owner/:repo/license": [
    LicensesGetForRepoEndpoint,
    LicensesGetForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/milestones": [
    IssuesListMilestonesForRepoEndpoint,
    IssuesListMilestonesForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesGetMilestoneEndpoint,
    IssuesGetMilestoneRequestOptions
  ];
  "GET /repos/:owner/:repo/milestones/:milestone_number/labels": [
    IssuesListLabelsForMilestoneEndpoint,
    IssuesListLabelsForMilestoneRequestOptions
  ];
  "GET /repos/:owner/:repo/notifications": [
    ActivityListNotificationsForRepoEndpoint,
    ActivityListNotificationsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/pages": [
    ReposGetPagesEndpoint,
    ReposGetPagesRequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds": [
    ReposListPagesBuildsEndpoint,
    ReposListPagesBuildsRequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds/:build_id": [
    ReposGetPagesBuildEndpoint,
    ReposGetPagesBuildRequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds/latest": [
    ReposGetLatestPagesBuildEndpoint,
    ReposGetLatestPagesBuildRequestOptions
  ];
  "GET /repos/:owner/:repo/projects": [
    ProjectsListForRepoEndpoint,
    ProjectsListForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls": [PullsListEndpoint, PullsListRequestOptions];
  "GET /repos/:owner/:repo/pulls/:pull_number": [
    PullsGetEndpoint,
    PullsGetRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/comments": [
    PullsListCommentsEndpoint,
    PullsListCommentsRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/commits": [
    PullsListCommitsEndpoint,
    PullsListCommitsRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/files": [
    PullsListFilesEndpoint,
    PullsListFilesRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/merge": [
    PullsCheckIfMergedEndpoint,
    PullsCheckIfMergedRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsListReviewRequestsEndpoint,
    PullsListReviewRequestsRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews": [
    PullsListReviewsEndpoint,
    PullsListReviewsRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsGetReviewEndpoint,
    PullsGetReviewRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments": [
    PullsGetCommentsForReviewEndpoint,
    PullsGetCommentsForReviewRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments": [
    PullsListCommentsForRepoEndpoint,
    PullsListCommentsForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsGetCommentEndpoint,
    PullsGetCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [
    ReactionsListForPullRequestReviewCommentEndpoint,
    ReactionsListForPullRequestReviewCommentRequestOptions
  ];
  "GET /repos/:owner/:repo/readme": [
    ReposGetReadmeEndpoint,
    ReposGetReadmeRequestOptions
  ];
  "GET /repos/:owner/:repo/releases": [
    ReposListReleasesEndpoint,
    ReposListReleasesRequestOptions
  ];
  "GET /repos/:owner/:repo/releases/:release_id": [
    ReposGetReleaseEndpoint,
    ReposGetReleaseRequestOptions
  ];
  "GET /repos/:owner/:repo/releases/:release_id/assets": [
    ReposListAssetsForReleaseEndpoint,
    ReposListAssetsForReleaseRequestOptions
  ];
  "GET /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposGetReleaseAssetEndpoint,
    ReposGetReleaseAssetRequestOptions
  ];
  "GET /repos/:owner/:repo/releases/latest": [
    ReposGetLatestReleaseEndpoint,
    ReposGetLatestReleaseRequestOptions
  ];
  "GET /repos/:owner/:repo/releases/tags/:tag": [
    ReposGetReleaseByTagEndpoint,
    ReposGetReleaseByTagRequestOptions
  ];
  "GET /repos/:owner/:repo/stargazers": [
    ActivityListStargazersForRepoEndpoint,
    ActivityListStargazersForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/stats/code_frequency": [
    ReposGetCodeFrequencyStatsEndpoint,
    ReposGetCodeFrequencyStatsRequestOptions
  ];
  "GET /repos/:owner/:repo/stats/commit_activity": [
    ReposGetCommitActivityStatsEndpoint,
    ReposGetCommitActivityStatsRequestOptions
  ];
  "GET /repos/:owner/:repo/stats/contributors": [
    ReposGetContributorsStatsEndpoint,
    ReposGetContributorsStatsRequestOptions
  ];
  "GET /repos/:owner/:repo/stats/participation": [
    ReposGetParticipationStatsEndpoint,
    ReposGetParticipationStatsRequestOptions
  ];
  "GET /repos/:owner/:repo/stats/punch_card": [
    ReposGetPunchCardStatsEndpoint,
    ReposGetPunchCardStatsRequestOptions
  ];
  "GET /repos/:owner/:repo/subscribers": [
    ActivityListWatchersForRepoEndpoint,
    ActivityListWatchersForRepoRequestOptions
  ];
  "GET /repos/:owner/:repo/subscription": [
    ActivityGetRepoSubscriptionEndpoint,
    ActivityGetRepoSubscriptionRequestOptions
  ];
  "GET /repos/:owner/:repo/tags": [
    ReposListTagsEndpoint,
    ReposListTagsRequestOptions
  ];
  "GET /repos/:owner/:repo/teams": [
    ReposListTeamsEndpoint,
    ReposListTeamsRequestOptions
  ];
  "GET /repos/:owner/:repo/topics": [
    ReposListTopicsEndpoint,
    ReposListTopicsRequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/clones": [
    ReposGetClonesEndpoint,
    ReposGetClonesRequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/popular/paths": [
    ReposGetTopPathsEndpoint,
    ReposGetTopPathsRequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/popular/referrers": [
    ReposGetTopReferrersEndpoint,
    ReposGetTopReferrersRequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/views": [
    ReposGetViewsEndpoint,
    ReposGetViewsRequestOptions
  ];
  "GET /repos/:owner/:repo/vulnerability-alerts": [
    ReposCheckVulnerabilityAlertsEndpoint,
    ReposCheckVulnerabilityAlertsRequestOptions
  ];
  "GET /repositories": [ReposListPublicEndpoint, ReposListPublicRequestOptions];
  "GET /scim/v2/organizations/:org/Users": [
    ScimListProvisionedIdentitiesEndpoint,
    ScimListProvisionedIdentitiesRequestOptions
  ];
  "GET /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimGetProvisioningDetailsForUserEndpoint,
    ScimGetProvisioningDetailsForUserRequestOptions
  ];
  "GET /search/code": [SearchCodeEndpoint, SearchCodeRequestOptions];
  "GET /search/commits": [SearchCommitsEndpoint, SearchCommitsRequestOptions];
  "GET /search/issues": [
    SearchIssuesAndPullRequestsEndpoint | SearchIssuesEndpoint,
    SearchIssuesAndPullRequestsRequestOptions | SearchIssuesRequestOptions
  ];
  "GET /search/labels": [SearchLabelsEndpoint, SearchLabelsRequestOptions];
  "GET /search/repositories": [SearchReposEndpoint, SearchReposRequestOptions];
  "GET /search/topics": [SearchTopicsEndpoint, SearchTopicsRequestOptions];
  "GET /search/users": [SearchUsersEndpoint, SearchUsersRequestOptions];
  "GET /teams/:team_id": [TeamsGetEndpoint, TeamsGetRequestOptions];
  "GET /teams/:team_id/discussions": [
    TeamsListDiscussionsEndpoint,
    TeamsListDiscussionsRequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number": [
    TeamsGetDiscussionEndpoint,
    TeamsGetDiscussionRequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments": [
    TeamsListDiscussionCommentsEndpoint,
    TeamsListDiscussionCommentsRequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsGetDiscussionCommentEndpoint,
    TeamsGetDiscussionCommentRequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [
    ReactionsListForTeamDiscussionCommentEndpoint,
    ReactionsListForTeamDiscussionCommentRequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/reactions": [
    ReactionsListForTeamDiscussionEndpoint,
    ReactionsListForTeamDiscussionRequestOptions
  ];
  "GET /teams/:team_id/invitations": [
    TeamsListPendingInvitationsEndpoint,
    TeamsListPendingInvitationsRequestOptions
  ];
  "GET /teams/:team_id/members": [
    TeamsListMembersEndpoint,
    TeamsListMembersRequestOptions
  ];
  "GET /teams/:team_id/members/:username": [
    TeamsGetMemberEndpoint,
    TeamsGetMemberRequestOptions
  ];
  "GET /teams/:team_id/memberships/:username": [
    TeamsGetMembershipEndpoint,
    TeamsGetMembershipRequestOptions
  ];
  "GET /teams/:team_id/projects": [
    TeamsListProjectsEndpoint,
    TeamsListProjectsRequestOptions
  ];
  "GET /teams/:team_id/projects/:project_id": [
    TeamsReviewProjectEndpoint,
    TeamsReviewProjectRequestOptions
  ];
  "GET /teams/:team_id/repos": [
    TeamsListReposEndpoint,
    TeamsListReposRequestOptions
  ];
  "GET /teams/:team_id/repos/:owner/:repo": [
    TeamsCheckManagesRepoEndpoint,
    TeamsCheckManagesRepoRequestOptions
  ];
  "GET /teams/:team_id/team-sync/group-mappings": [
    TeamsListIdPGroupsEndpoint,
    TeamsListIdPGroupsRequestOptions
  ];
  "GET /teams/:team_id/teams": [
    TeamsListChildEndpoint,
    TeamsListChildRequestOptions
  ];
  "GET /user": [
    UsersGetAuthenticatedEndpoint,
    UsersGetAuthenticatedRequestOptions
  ];
  "GET /user/blocks": [
    UsersListBlockedEndpoint,
    UsersListBlockedRequestOptions
  ];
  "GET /user/blocks/:username": [
    UsersCheckBlockedEndpoint,
    UsersCheckBlockedRequestOptions
  ];
  "GET /user/emails": [UsersListEmailsEndpoint, UsersListEmailsRequestOptions];
  "GET /user/followers": [
    UsersListFollowersForAuthenticatedUserEndpoint,
    UsersListFollowersForAuthenticatedUserRequestOptions
  ];
  "GET /user/following": [
    UsersListFollowingForAuthenticatedUserEndpoint,
    UsersListFollowingForAuthenticatedUserRequestOptions
  ];
  "GET /user/following/:username": [
    UsersCheckFollowingEndpoint,
    UsersCheckFollowingRequestOptions
  ];
  "GET /user/gpg_keys": [
    UsersListGpgKeysEndpoint,
    UsersListGpgKeysRequestOptions
  ];
  "GET /user/gpg_keys/:gpg_key_id": [
    UsersGetGpgKeyEndpoint,
    UsersGetGpgKeyRequestOptions
  ];
  "GET /user/installations": [
    AppsListInstallationsForAuthenticatedUserEndpoint,
    AppsListInstallationsForAuthenticatedUserRequestOptions
  ];
  "GET /user/installations/:installation_id/repositories": [
    AppsListInstallationReposForAuthenticatedUserEndpoint,
    AppsListInstallationReposForAuthenticatedUserRequestOptions
  ];
  "GET /user/issues": [
    IssuesListForAuthenticatedUserEndpoint,
    IssuesListForAuthenticatedUserRequestOptions
  ];
  "GET /user/keys": [
    UsersListPublicKeysEndpoint,
    UsersListPublicKeysRequestOptions
  ];
  "GET /user/keys/:key_id": [
    UsersGetPublicKeyEndpoint,
    UsersGetPublicKeyRequestOptions
  ];
  "GET /user/marketplace_purchases": [
    AppsListMarketplacePurchasesForAuthenticatedUserEndpoint,
    AppsListMarketplacePurchasesForAuthenticatedUserRequestOptions
  ];
  "GET /user/marketplace_purchases/stubbed": [
    AppsListMarketplacePurchasesForAuthenticatedUserStubbedEndpoint,
    AppsListMarketplacePurchasesForAuthenticatedUserStubbedRequestOptions
  ];
  "GET /user/memberships/orgs": [
    OrgsListMembershipsEndpoint,
    OrgsListMembershipsRequestOptions
  ];
  "GET /user/memberships/orgs/:org": [
    OrgsGetMembershipForAuthenticatedUserEndpoint,
    OrgsGetMembershipForAuthenticatedUserRequestOptions
  ];
  "GET /user/migrations": [
    MigrationsListForAuthenticatedUserEndpoint,
    MigrationsListForAuthenticatedUserRequestOptions
  ];
  "GET /user/migrations/:migration_id": [
    MigrationsGetStatusForAuthenticatedUserEndpoint,
    MigrationsGetStatusForAuthenticatedUserRequestOptions
  ];
  "GET /user/migrations/:migration_id/archive": [
    MigrationsGetArchiveForAuthenticatedUserEndpoint,
    MigrationsGetArchiveForAuthenticatedUserRequestOptions
  ];
  "GET /user/orgs": [
    OrgsListForAuthenticatedUserEndpoint,
    OrgsListForAuthenticatedUserRequestOptions
  ];
  "GET /user/public_emails": [
    UsersListPublicEmailsEndpoint,
    UsersListPublicEmailsRequestOptions
  ];
  "GET /user/repos": [ReposListEndpoint, ReposListRequestOptions];
  "GET /user/repository_invitations": [
    ReposListInvitationsForAuthenticatedUserEndpoint,
    ReposListInvitationsForAuthenticatedUserRequestOptions
  ];
  "GET /user/starred": [
    ActivityListReposStarredByAuthenticatedUserEndpoint,
    ActivityListReposStarredByAuthenticatedUserRequestOptions
  ];
  "GET /user/starred/:owner/:repo": [
    ActivityCheckStarringRepoEndpoint,
    ActivityCheckStarringRepoRequestOptions
  ];
  "GET /user/subscriptions": [
    ActivityListWatchedReposForAuthenticatedUserEndpoint,
    ActivityListWatchedReposForAuthenticatedUserRequestOptions
  ];
  "GET /user/subscriptions/:owner/:repo": [
    ActivityCheckWatchingRepoLegacyEndpoint,
    ActivityCheckWatchingRepoLegacyRequestOptions
  ];
  "GET /user/teams": [
    TeamsListForAuthenticatedUserEndpoint,
    TeamsListForAuthenticatedUserRequestOptions
  ];
  "GET /users": [UsersListEndpoint, UsersListRequestOptions];
  "GET /users/:username": [
    UsersGetByUsernameEndpoint,
    UsersGetByUsernameRequestOptions
  ];
  "GET /users/:username/events": [
    ActivityListEventsForUserEndpoint,
    ActivityListEventsForUserRequestOptions
  ];
  "GET /users/:username/events/orgs/:org": [
    ActivityListEventsForOrgEndpoint,
    ActivityListEventsForOrgRequestOptions
  ];
  "GET /users/:username/events/public": [
    ActivityListPublicEventsForUserEndpoint,
    ActivityListPublicEventsForUserRequestOptions
  ];
  "GET /users/:username/followers": [
    UsersListFollowersForUserEndpoint,
    UsersListFollowersForUserRequestOptions
  ];
  "GET /users/:username/following": [
    UsersListFollowingForUserEndpoint,
    UsersListFollowingForUserRequestOptions
  ];
  "GET /users/:username/following/:target_user": [
    UsersCheckFollowingForUserEndpoint,
    UsersCheckFollowingForUserRequestOptions
  ];
  "GET /users/:username/gists": [
    GistsListPublicForUserEndpoint,
    GistsListPublicForUserRequestOptions
  ];
  "GET /users/:username/gpg_keys": [
    UsersListGpgKeysForUserEndpoint,
    UsersListGpgKeysForUserRequestOptions
  ];
  "GET /users/:username/hovercard": [
    UsersGetContextForUserEndpoint,
    UsersGetContextForUserRequestOptions
  ];
  "GET /users/:username/installation": [
    AppsGetUserInstallationEndpoint | AppsFindUserInstallationEndpoint,

      | AppsGetUserInstallationRequestOptions
      | AppsFindUserInstallationRequestOptions
  ];
  "GET /users/:username/keys": [
    UsersListPublicKeysForUserEndpoint,
    UsersListPublicKeysForUserRequestOptions
  ];
  "GET /users/:username/orgs": [
    OrgsListForUserEndpoint,
    OrgsListForUserRequestOptions
  ];
  "GET /users/:username/projects": [
    ProjectsListForUserEndpoint,
    ProjectsListForUserRequestOptions
  ];
  "GET /users/:username/received_events": [
    ActivityListReceivedEventsForUserEndpoint,
    ActivityListReceivedEventsForUserRequestOptions
  ];
  "GET /users/:username/received_events/public": [
    ActivityListReceivedPublicEventsForUserEndpoint,
    ActivityListReceivedPublicEventsForUserRequestOptions
  ];
  "GET /users/:username/repos": [
    ReposListForUserEndpoint,
    ReposListForUserRequestOptions
  ];
  "GET /users/:username/starred": [
    ActivityListReposStarredByUserEndpoint,
    ActivityListReposStarredByUserRequestOptions
  ];
  "GET /users/:username/subscriptions": [
    ActivityListReposWatchedByUserEndpoint,
    ActivityListReposWatchedByUserRequestOptions
  ];
  "PATCH /authorizations/:authorization_id": [
    OauthAuthorizationsUpdateAuthorizationEndpoint,
    OauthAuthorizationsUpdateAuthorizationRequestOptions
  ];
  "PATCH /gists/:gist_id": [GistsUpdateEndpoint, GistsUpdateRequestOptions];
  "PATCH /gists/:gist_id/comments/:comment_id": [
    GistsUpdateCommentEndpoint,
    GistsUpdateCommentRequestOptions
  ];
  "PATCH /notifications/threads/:thread_id": [
    ActivityMarkThreadAsReadEndpoint,
    ActivityMarkThreadAsReadRequestOptions
  ];
  "PATCH /orgs/:org": [OrgsUpdateEndpoint, OrgsUpdateRequestOptions];
  "PATCH /orgs/:org/hooks/:hook_id": [
    OrgsUpdateHookEndpoint,
    OrgsUpdateHookRequestOptions
  ];
  "PATCH /projects/:project_id": [
    ProjectsUpdateEndpoint,
    ProjectsUpdateRequestOptions
  ];
  "PATCH /projects/columns/:column_id": [
    ProjectsUpdateColumnEndpoint,
    ProjectsUpdateColumnRequestOptions
  ];
  "PATCH /projects/columns/cards/:card_id": [
    ProjectsUpdateCardEndpoint,
    ProjectsUpdateCardRequestOptions
  ];
  "PATCH /repos/:owner/:repo": [ReposUpdateEndpoint, ReposUpdateRequestOptions];
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposUpdateProtectedBranchPullRequestReviewEnforcementEndpoint,
    ReposUpdateProtectedBranchPullRequestReviewEnforcementRequestOptions
  ];
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposUpdateProtectedBranchRequiredStatusChecksEndpoint,
    ReposUpdateProtectedBranchRequiredStatusChecksRequestOptions
  ];
  "PATCH /repos/:owner/:repo/check-runs/:check_run_id": [
    ChecksUpdateEndpoint,
    ChecksUpdateRequestOptions
  ];
  "PATCH /repos/:owner/:repo/check-suites/preferences": [
    ChecksSetSuitesPreferencesEndpoint,
    ChecksSetSuitesPreferencesRequestOptions
  ];
  "PATCH /repos/:owner/:repo/comments/:comment_id": [
    ReposUpdateCommitCommentEndpoint,
    ReposUpdateCommitCommentRequestOptions
  ];
  "PATCH /repos/:owner/:repo/git/refs/:ref": [
    GitUpdateRefEndpoint,
    GitUpdateRefRequestOptions
  ];
  "PATCH /repos/:owner/:repo/hooks/:hook_id": [
    ReposUpdateHookEndpoint,
    ReposUpdateHookRequestOptions
  ];
  "PATCH /repos/:owner/:repo/import": [
    MigrationsUpdateImportEndpoint,
    MigrationsUpdateImportRequestOptions
  ];
  "PATCH /repos/:owner/:repo/import/authors/:author_id": [
    MigrationsMapCommitAuthorEndpoint,
    MigrationsMapCommitAuthorRequestOptions
  ];
  "PATCH /repos/:owner/:repo/import/lfs": [
    MigrationsSetLfsPreferenceEndpoint,
    MigrationsSetLfsPreferenceRequestOptions
  ];
  "PATCH /repos/:owner/:repo/invitations/:invitation_id": [
    ReposUpdateInvitationEndpoint,
    ReposUpdateInvitationRequestOptions
  ];
  "PATCH /repos/:owner/:repo/issues/:issue_number": [
    IssuesUpdateEndpoint,
    IssuesUpdateRequestOptions
  ];
  "PATCH /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesUpdateCommentEndpoint,
    IssuesUpdateCommentRequestOptions
  ];
  "PATCH /repos/:owner/:repo/labels/:name": [
    IssuesUpdateLabelEndpoint,
    IssuesUpdateLabelRequestOptions
  ];
  "PATCH /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesUpdateMilestoneEndpoint,
    IssuesUpdateMilestoneRequestOptions
  ];
  "PATCH /repos/:owner/:repo/pulls/:pull_number": [
    PullsUpdateEndpoint,
    PullsUpdateRequestOptions
  ];
  "PATCH /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsUpdateCommentEndpoint,
    PullsUpdateCommentRequestOptions
  ];
  "PATCH /repos/:owner/:repo/releases/:release_id": [
    ReposUpdateReleaseEndpoint,
    ReposUpdateReleaseRequestOptions
  ];
  "PATCH /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposUpdateReleaseAssetEndpoint,
    ReposUpdateReleaseAssetRequestOptions
  ];
  "PATCH /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimUpdateUserAttributeEndpoint,
    ScimUpdateUserAttributeRequestOptions
  ];
  "PATCH /teams/:team_id": [TeamsUpdateEndpoint, TeamsUpdateRequestOptions];
  "PATCH /teams/:team_id/discussions/:discussion_number": [
    TeamsUpdateDiscussionEndpoint,
    TeamsUpdateDiscussionRequestOptions
  ];
  "PATCH /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsUpdateDiscussionCommentEndpoint,
    TeamsUpdateDiscussionCommentRequestOptions
  ];
  "PATCH /teams/:team_id/team-sync/group-mappings": [
    TeamsCreateOrUpdateIdPGroupConnectionsEndpoint,
    TeamsCreateOrUpdateIdPGroupConnectionsRequestOptions
  ];
  "PATCH /user": [
    UsersUpdateAuthenticatedEndpoint,
    UsersUpdateAuthenticatedRequestOptions
  ];
  "PATCH /user/email/visibility": [
    UsersTogglePrimaryEmailVisibilityEndpoint,
    UsersTogglePrimaryEmailVisibilityRequestOptions
  ];
  "PATCH /user/memberships/orgs/:org": [
    OrgsUpdateMembershipEndpoint,
    OrgsUpdateMembershipRequestOptions
  ];
  "PATCH /user/repository_invitations/:invitation_id": [
    ReposAcceptInvitationEndpoint,
    ReposAcceptInvitationRequestOptions
  ];
  "POST /app-manifests/:code/conversions": [
    AppsCreateFromManifestEndpoint,
    AppsCreateFromManifestRequestOptions
  ];
  "POST /app/installations/:installation_id/access_tokens": [
    AppsCreateInstallationTokenEndpoint,
    AppsCreateInstallationTokenRequestOptions
  ];
  "POST /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsResetAuthorizationEndpoint,
    OauthAuthorizationsResetAuthorizationRequestOptions
  ];
  "POST /authorizations": [
    OauthAuthorizationsCreateAuthorizationEndpoint,
    OauthAuthorizationsCreateAuthorizationRequestOptions
  ];
  "POST /content_references/:content_reference_id/attachments": [
    AppsCreateContentAttachmentEndpoint,
    AppsCreateContentAttachmentRequestOptions
  ];
  "POST /gists": [GistsCreateEndpoint, GistsCreateRequestOptions];
  "POST /gists/:gist_id/comments": [
    GistsCreateCommentEndpoint,
    GistsCreateCommentRequestOptions
  ];
  "POST /gists/:gist_id/forks": [GistsForkEndpoint, GistsForkRequestOptions];
  "POST /markdown": [MarkdownRenderEndpoint, MarkdownRenderRequestOptions];
  "POST /markdown/raw": [
    MarkdownRenderRawEndpoint,
    MarkdownRenderRawRequestOptions
  ];
  "POST /orgs/:org/hooks": [
    OrgsCreateHookEndpoint,
    OrgsCreateHookRequestOptions
  ];
  "POST /orgs/:org/hooks/:hook_id/pings": [
    OrgsPingHookEndpoint,
    OrgsPingHookRequestOptions
  ];
  "POST /orgs/:org/invitations": [
    OrgsCreateInvitationEndpoint,
    OrgsCreateInvitationRequestOptions
  ];
  "POST /orgs/:org/migrations": [
    MigrationsStartForOrgEndpoint,
    MigrationsStartForOrgRequestOptions
  ];
  "POST /orgs/:org/projects": [
    ProjectsCreateForOrgEndpoint,
    ProjectsCreateForOrgRequestOptions
  ];
  "POST /orgs/:org/repos": [
    ReposCreateInOrgEndpoint,
    ReposCreateInOrgRequestOptions
  ];
  "POST /orgs/:org/teams": [TeamsCreateEndpoint, TeamsCreateRequestOptions];
  "POST /projects/:project_id/columns": [
    ProjectsCreateColumnEndpoint,
    ProjectsCreateColumnRequestOptions
  ];
  "POST /projects/columns/:column_id/cards": [
    ProjectsCreateCardEndpoint,
    ProjectsCreateCardRequestOptions
  ];
  "POST /projects/columns/:column_id/moves": [
    ProjectsMoveColumnEndpoint,
    ProjectsMoveColumnRequestOptions
  ];
  "POST /projects/columns/cards/:card_id/moves": [
    ProjectsMoveCardEndpoint,
    ProjectsMoveCardRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposAddProtectedBranchAdminEnforcementEndpoint,
    ReposAddProtectedBranchAdminEnforcementRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposAddProtectedBranchRequiredSignaturesEndpoint,
    ReposAddProtectedBranchRequiredSignaturesRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposAddProtectedBranchRequiredStatusChecksContextsEndpoint,
    ReposAddProtectedBranchRequiredStatusChecksContextsRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [
    ReposAddProtectedBranchAppRestrictionsEndpoint,
    ReposAddProtectedBranchAppRestrictionsRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposAddProtectedBranchTeamRestrictionsEndpoint,
    ReposAddProtectedBranchTeamRestrictionsRequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposAddProtectedBranchUserRestrictionsEndpoint,
    ReposAddProtectedBranchUserRestrictionsRequestOptions
  ];
  "POST /repos/:owner/:repo/check-runs": [
    ChecksCreateEndpoint,
    ChecksCreateRequestOptions
  ];
  "POST /repos/:owner/:repo/check-suites": [
    ChecksCreateSuiteEndpoint,
    ChecksCreateSuiteRequestOptions
  ];
  "POST /repos/:owner/:repo/check-suites/:check_suite_id/rerequest": [
    ChecksRerequestSuiteEndpoint,
    ChecksRerequestSuiteRequestOptions
  ];
  "POST /repos/:owner/:repo/comments/:comment_id/reactions": [
    ReactionsCreateForCommitCommentEndpoint,
    ReactionsCreateForCommitCommentRequestOptions
  ];
  "POST /repos/:owner/:repo/commits/:commit_sha/comments": [
    ReposCreateCommitCommentEndpoint,
    ReposCreateCommitCommentRequestOptions
  ];
  "POST /repos/:owner/:repo/deployments": [
    ReposCreateDeploymentEndpoint,
    ReposCreateDeploymentRequestOptions
  ];
  "POST /repos/:owner/:repo/deployments/:deployment_id/statuses": [
    ReposCreateDeploymentStatusEndpoint,
    ReposCreateDeploymentStatusRequestOptions
  ];
  "POST /repos/:owner/:repo/dispatches": [
    ReposCreateDispatchEventEndpoint,
    ReposCreateDispatchEventRequestOptions
  ];
  "POST /repos/:owner/:repo/forks": [
    ReposCreateForkEndpoint,
    ReposCreateForkRequestOptions
  ];
  "POST /repos/:owner/:repo/git/blobs": [
    GitCreateBlobEndpoint,
    GitCreateBlobRequestOptions
  ];
  "POST /repos/:owner/:repo/git/commits": [
    GitCreateCommitEndpoint,
    GitCreateCommitRequestOptions
  ];
  "POST /repos/:owner/:repo/git/refs": [
    GitCreateRefEndpoint,
    GitCreateRefRequestOptions
  ];
  "POST /repos/:owner/:repo/git/tags": [
    GitCreateTagEndpoint,
    GitCreateTagRequestOptions
  ];
  "POST /repos/:owner/:repo/git/trees": [
    GitCreateTreeEndpoint,
    GitCreateTreeRequestOptions
  ];
  "POST /repos/:owner/:repo/hooks": [
    ReposCreateHookEndpoint,
    ReposCreateHookRequestOptions
  ];
  "POST /repos/:owner/:repo/hooks/:hook_id/pings": [
    ReposPingHookEndpoint,
    ReposPingHookRequestOptions
  ];
  "POST /repos/:owner/:repo/hooks/:hook_id/tests": [
    ReposTestPushHookEndpoint,
    ReposTestPushHookRequestOptions
  ];
  "POST /repos/:owner/:repo/issues": [
    IssuesCreateEndpoint,
    IssuesCreateRequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/assignees": [
    IssuesAddAssigneesEndpoint,
    IssuesAddAssigneesRequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/comments": [
    IssuesCreateCommentEndpoint,
    IssuesCreateCommentRequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesAddLabelsEndpoint,
    IssuesAddLabelsRequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/reactions": [
    ReactionsCreateForIssueEndpoint,
    ReactionsCreateForIssueRequestOptions
  ];
  "POST /repos/:owner/:repo/issues/comments/:comment_id/reactions": [
    ReactionsCreateForIssueCommentEndpoint,
    ReactionsCreateForIssueCommentRequestOptions
  ];
  "POST /repos/:owner/:repo/keys": [
    ReposAddDeployKeyEndpoint,
    ReposAddDeployKeyRequestOptions
  ];
  "POST /repos/:owner/:repo/labels": [
    IssuesCreateLabelEndpoint,
    IssuesCreateLabelRequestOptions
  ];
  "POST /repos/:owner/:repo/merges": [
    ReposMergeEndpoint,
    ReposMergeRequestOptions
  ];
  "POST /repos/:owner/:repo/milestones": [
    IssuesCreateMilestoneEndpoint,
    IssuesCreateMilestoneRequestOptions
  ];
  "POST /repos/:owner/:repo/pages": [
    ReposEnablePagesSiteEndpoint,
    ReposEnablePagesSiteRequestOptions
  ];
  "POST /repos/:owner/:repo/pages/builds": [
    ReposRequestPageBuildEndpoint,
    ReposRequestPageBuildRequestOptions
  ];
  "POST /repos/:owner/:repo/projects": [
    ProjectsCreateForRepoEndpoint,
    ProjectsCreateForRepoRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls": [
    PullsCreateEndpoint,
    PullsCreateRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/comments": [
    PullsCreateCommentEndpoint | PullsCreateCommentReplyEndpoint,
    PullsCreateCommentRequestOptions | PullsCreateCommentReplyRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies": [
    PullsCreateReviewCommentReplyEndpoint,
    PullsCreateReviewCommentReplyRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsCreateReviewRequestEndpoint,
    PullsCreateReviewRequestRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews": [
    PullsCreateReviewEndpoint,
    PullsCreateReviewRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events": [
    PullsSubmitReviewEndpoint,
    PullsSubmitReviewRequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [
    ReactionsCreateForPullRequestReviewCommentEndpoint,
    ReactionsCreateForPullRequestReviewCommentRequestOptions
  ];
  "POST /repos/:owner/:repo/releases": [
    ReposCreateReleaseEndpoint,
    ReposCreateReleaseRequestOptions
  ];
  "POST /repos/:owner/:repo/statuses/:sha": [
    ReposCreateStatusEndpoint,
    ReposCreateStatusRequestOptions
  ];
  "POST /repos/:owner/:repo/transfer": [
    ReposTransferEndpoint,
    ReposTransferRequestOptions
  ];
  "POST /repos/:template_owner/:template_repo/generate": [
    ReposCreateUsingTemplateEndpoint,
    ReposCreateUsingTemplateRequestOptions
  ];
  "POST /scim/v2/organizations/:org/Users": [
    ScimProvisionAndInviteUsersEndpoint | ScimProvisionInviteUsersEndpoint,

      | ScimProvisionAndInviteUsersRequestOptions
      | ScimProvisionInviteUsersRequestOptions
  ];
  "POST /teams/:team_id/discussions": [
    TeamsCreateDiscussionEndpoint,
    TeamsCreateDiscussionRequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/comments": [
    TeamsCreateDiscussionCommentEndpoint,
    TeamsCreateDiscussionCommentRequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [
    ReactionsCreateForTeamDiscussionCommentEndpoint,
    ReactionsCreateForTeamDiscussionCommentRequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/reactions": [
    ReactionsCreateForTeamDiscussionEndpoint,
    ReactionsCreateForTeamDiscussionRequestOptions
  ];
  "POST /user/emails": [UsersAddEmailsEndpoint, UsersAddEmailsRequestOptions];
  "POST /user/gpg_keys": [
    UsersCreateGpgKeyEndpoint,
    UsersCreateGpgKeyRequestOptions
  ];
  "POST /user/keys": [
    UsersCreatePublicKeyEndpoint,
    UsersCreatePublicKeyRequestOptions
  ];
  "POST /user/migrations": [
    MigrationsStartForAuthenticatedUserEndpoint,
    MigrationsStartForAuthenticatedUserRequestOptions
  ];
  "POST /user/projects": [
    ProjectsCreateForAuthenticatedUserEndpoint,
    ProjectsCreateForAuthenticatedUserRequestOptions
  ];
  "POST /user/repos": [
    ReposCreateForAuthenticatedUserEndpoint,
    ReposCreateForAuthenticatedUserRequestOptions
  ];
  "PUT /authorizations/clients/:client_id": [
    OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint,
    OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions
  ];
  "PUT /authorizations/clients/:client_id/:fingerprint": [

      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint
      | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintEndpoint,

      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions
      | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintRequestOptions
  ];
  "PUT /gists/:gist_id/star": [GistsStarEndpoint, GistsStarRequestOptions];
  "PUT /notifications": [
    ActivityMarkAsReadEndpoint,
    ActivityMarkAsReadRequestOptions
  ];
  "PUT /notifications/threads/:thread_id/subscription": [
    ActivitySetThreadSubscriptionEndpoint,
    ActivitySetThreadSubscriptionRequestOptions
  ];
  "PUT /orgs/:org/blocks/:username": [
    OrgsBlockUserEndpoint,
    OrgsBlockUserRequestOptions
  ];
  "PUT /orgs/:org/interaction-limits": [
    InteractionsAddOrUpdateRestrictionsForOrgEndpoint,
    InteractionsAddOrUpdateRestrictionsForOrgRequestOptions
  ];
  "PUT /orgs/:org/memberships/:username": [
    OrgsAddOrUpdateMembershipEndpoint,
    OrgsAddOrUpdateMembershipRequestOptions
  ];
  "PUT /orgs/:org/outside_collaborators/:username": [
    OrgsConvertMemberToOutsideCollaboratorEndpoint,
    OrgsConvertMemberToOutsideCollaboratorRequestOptions
  ];
  "PUT /orgs/:org/public_members/:username": [
    OrgsPublicizeMembershipEndpoint,
    OrgsPublicizeMembershipRequestOptions
  ];
  "PUT /projects/:project_id/collaborators/:username": [
    ProjectsAddCollaboratorEndpoint,
    ProjectsAddCollaboratorRequestOptions
  ];
  "PUT /repos/:owner/:repo/automated-security-fixes": [
    ReposEnableAutomatedSecurityFixesEndpoint,
    ReposEnableAutomatedSecurityFixesRequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection": [
    ReposUpdateBranchProtectionEndpoint,
    ReposUpdateBranchProtectionRequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposReplaceProtectedBranchRequiredStatusChecksContextsEndpoint,
    ReposReplaceProtectedBranchRequiredStatusChecksContextsRequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [
    ReposReplaceProtectedBranchAppRestrictionsEndpoint,
    ReposReplaceProtectedBranchAppRestrictionsRequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposReplaceProtectedBranchTeamRestrictionsEndpoint,
    ReposReplaceProtectedBranchTeamRestrictionsRequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposReplaceProtectedBranchUserRestrictionsEndpoint,
    ReposReplaceProtectedBranchUserRestrictionsRequestOptions
  ];
  "PUT /repos/:owner/:repo/collaborators/:username": [
    ReposAddCollaboratorEndpoint,
    ReposAddCollaboratorRequestOptions
  ];
  "PUT /repos/:owner/:repo/contents/:path": [

      | ReposCreateOrUpdateFileEndpoint
      | ReposCreateFileEndpoint
      | ReposUpdateFileEndpoint,

      | ReposCreateOrUpdateFileRequestOptions
      | ReposCreateFileRequestOptions
      | ReposUpdateFileRequestOptions
  ];
  "PUT /repos/:owner/:repo/import": [
    MigrationsStartImportEndpoint,
    MigrationsStartImportRequestOptions
  ];
  "PUT /repos/:owner/:repo/interaction-limits": [
    InteractionsAddOrUpdateRestrictionsForRepoEndpoint,
    InteractionsAddOrUpdateRestrictionsForRepoRequestOptions
  ];
  "PUT /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesReplaceLabelsEndpoint,
    IssuesReplaceLabelsRequestOptions
  ];
  "PUT /repos/:owner/:repo/issues/:issue_number/lock": [
    IssuesLockEndpoint,
    IssuesLockRequestOptions
  ];
  "PUT /repos/:owner/:repo/notifications": [
    ActivityMarkNotificationsAsReadForRepoEndpoint,
    ActivityMarkNotificationsAsReadForRepoRequestOptions
  ];
  "PUT /repos/:owner/:repo/pages": [
    ReposUpdateInformationAboutPagesSiteEndpoint,
    ReposUpdateInformationAboutPagesSiteRequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/merge": [
    PullsMergeEndpoint,
    PullsMergeRequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsUpdateReviewEndpoint,
    PullsUpdateReviewRequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals": [
    PullsDismissReviewEndpoint,
    PullsDismissReviewRequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/update-branch": [
    PullsUpdateBranchEndpoint,
    PullsUpdateBranchRequestOptions
  ];
  "PUT /repos/:owner/:repo/subscription": [
    ActivitySetRepoSubscriptionEndpoint,
    ActivitySetRepoSubscriptionRequestOptions
  ];
  "PUT /repos/:owner/:repo/topics": [
    ReposReplaceTopicsEndpoint,
    ReposReplaceTopicsRequestOptions
  ];
  "PUT /repos/:owner/:repo/vulnerability-alerts": [
    ReposEnableVulnerabilityAlertsEndpoint,
    ReposEnableVulnerabilityAlertsRequestOptions
  ];
  "PUT /scim/v2/organizations/:org/Users/:scim_user_id": [

      | ScimReplaceProvisionedUserInformationEndpoint
      | ScimUpdateProvisionedOrgMembershipEndpoint,

      | ScimReplaceProvisionedUserInformationRequestOptions
      | ScimUpdateProvisionedOrgMembershipRequestOptions
  ];
  "PUT /teams/:team_id/members/:username": [
    TeamsAddMemberEndpoint,
    TeamsAddMemberRequestOptions
  ];
  "PUT /teams/:team_id/memberships/:username": [
    TeamsAddOrUpdateMembershipEndpoint,
    TeamsAddOrUpdateMembershipRequestOptions
  ];
  "PUT /teams/:team_id/projects/:project_id": [
    TeamsAddOrUpdateProjectEndpoint,
    TeamsAddOrUpdateProjectRequestOptions
  ];
  "PUT /teams/:team_id/repos/:owner/:repo": [
    TeamsAddOrUpdateRepoEndpoint,
    TeamsAddOrUpdateRepoRequestOptions
  ];
  "PUT /user/blocks/:username": [UsersBlockEndpoint, UsersBlockRequestOptions];
  "PUT /user/following/:username": [
    UsersFollowEndpoint,
    UsersFollowRequestOptions
  ];
  "PUT /user/installations/:installation_id/repositories/:repository_id": [
    AppsAddRepoToInstallationEndpoint,
    AppsAddRepoToInstallationRequestOptions
  ];
  "PUT /user/starred/:owner/:repo": [
    ActivityStarRepoEndpoint,
    ActivityStarRepoRequestOptions
  ];
  "PUT /user/subscriptions/:owner/:repo": [
    ActivityWatchRepoLegacyEndpoint,
    ActivityWatchRepoLegacyRequestOptions
  ];
}

type AppsGetAuthenticatedEndpoint = {};
type AppsGetAuthenticatedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateFromManifestEndpoint = {};
type AppsCreateFromManifestRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallationsEndpoint = {};
type AppsListInstallationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetInstallationEndpoint = {};
type AppsGetInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsDeleteInstallationEndpoint = {};
type AppsDeleteInstallationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateInstallationTokenEndpoint = {};
type AppsCreateInstallationTokenRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsListGrantsEndpoint = {};
type OauthAuthorizationsListGrantsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetGrantEndpoint = {};
type OauthAuthorizationsGetGrantRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsDeleteGrantEndpoint = {};
type OauthAuthorizationsDeleteGrantRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsRevokeGrantForApplicationEndpoint = {};
type OauthAuthorizationsRevokeGrantForApplicationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsCheckAuthorizationEndpoint = {};
type OauthAuthorizationsCheckAuthorizationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsResetAuthorizationEndpoint = {};
type OauthAuthorizationsResetAuthorizationRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsRevokeAuthorizationForApplicationEndpoint = {};
type OauthAuthorizationsRevokeAuthorizationForApplicationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetBySlugEndpoint = {};
type AppsGetBySlugRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsListAuthorizationsEndpoint = {};
type OauthAuthorizationsListAuthorizationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsCreateAuthorizationEndpoint = {};
type OauthAuthorizationsCreateAuthorizationRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint = {};
type OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint = {};
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintEndpoint = {};
type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetAuthorizationEndpoint = {};
type OauthAuthorizationsGetAuthorizationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsUpdateAuthorizationEndpoint = {};
type OauthAuthorizationsUpdateAuthorizationRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsDeleteAuthorizationEndpoint = {};
type OauthAuthorizationsDeleteAuthorizationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductListConductCodesEndpoint = {};
type CodesOfConductListConductCodesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductGetConductCodeEndpoint = {};
type CodesOfConductGetConductCodeRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateContentAttachmentEndpoint = {};
type AppsCreateContentAttachmentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type EmojisGetEndpoint = {};
type EmojisGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsEndpoint = {};
type ActivityListPublicEventsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListFeedsEndpoint = {};
type ActivityListFeedsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListEndpoint = {};
type GistsListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCreateEndpoint = {};
type GistsCreateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListPublicEndpoint = {};
type GistsListPublicRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListStarredEndpoint = {};
type GistsListStarredRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGetEndpoint = {};
type GistsGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUpdateEndpoint = {};
type GistsUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsDeleteEndpoint = {};
type GistsDeleteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListCommentsEndpoint = {};
type GistsListCommentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCreateCommentEndpoint = {};
type GistsCreateCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGetCommentEndpoint = {};
type GistsGetCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUpdateCommentEndpoint = {};
type GistsUpdateCommentRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsDeleteCommentEndpoint = {};
type GistsDeleteCommentRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListCommitsEndpoint = {};
type GistsListCommitsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsForkEndpoint = {};
type GistsForkRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListForksEndpoint = {};
type GistsListForksRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsStarEndpoint = {};
type GistsStarRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUnstarEndpoint = {};
type GistsUnstarRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCheckIsStarredEndpoint = {};
type GistsCheckIsStarredRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGetRevisionEndpoint = {};
type GistsGetRevisionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitignoreListTemplatesEndpoint = {};
type GitignoreListTemplatesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitignoreGetTemplateEndpoint = {};
type GitignoreGetTemplateRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListReposEndpoint = {};
type AppsListReposRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEndpoint = {};
type IssuesListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssuesLegacyEndpoint = {};
type SearchIssuesLegacyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchReposLegacyEndpoint = {};
type SearchReposLegacyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchEmailLegacyEndpoint = {};
type SearchEmailLegacyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchUsersLegacyEndpoint = {};
type SearchUsersLegacyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesListCommonlyUsedEndpoint = {};
type LicensesListCommonlyUsedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesListEndpoint = {};
type LicensesListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesGetEndpoint = {};
type LicensesGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MarkdownRenderEndpoint = {};
type MarkdownRenderRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MarkdownRenderRawEndpoint = {};
type MarkdownRenderRawRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCheckAccountIsAssociatedWithAnyEndpoint = {};
type AppsCheckAccountIsAssociatedWithAnyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListPlansEndpoint = {};
type AppsListPlansRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListAccountsUserOrOrgOnPlanEndpoint = {};
type AppsListAccountsUserOrOrgOnPlanRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCheckAccountIsAssociatedWithAnyStubbedEndpoint = {};
type AppsCheckAccountIsAssociatedWithAnyStubbedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListPlansStubbedEndpoint = {};
type AppsListPlansStubbedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListAccountsUserOrOrgOnPlanStubbedEndpoint = {};
type AppsListAccountsUserOrOrgOnPlanStubbedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MetaGetEndpoint = {};
type MetaGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForRepoNetworkEndpoint = {};
type ActivityListPublicEventsForRepoNetworkRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListNotificationsEndpoint = {};
type ActivityListNotificationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkAsReadEndpoint = {};
type ActivityMarkAsReadRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetThreadEndpoint = {};
type ActivityGetThreadRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkThreadAsReadEndpoint = {};
type ActivityMarkThreadAsReadRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetThreadSubscriptionEndpoint = {};
type ActivityGetThreadSubscriptionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivitySetThreadSubscriptionEndpoint = {};
type ActivitySetThreadSubscriptionRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityDeleteThreadSubscriptionEndpoint = {};
type ActivityDeleteThreadSubscriptionRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListEndpoint = {};
type OrgsListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetEndpoint = {};
type OrgsGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdateEndpoint = {};
type OrgsUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListBlockedUsersEndpoint = {};
type OrgsListBlockedUsersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckBlockedUserEndpoint = {};
type OrgsCheckBlockedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsBlockUserEndpoint = {};
type OrgsBlockUserRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUnblockUserEndpoint = {};
type OrgsUnblockUserRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListCredentialAuthorizationsEndpoint = {};
type OrgsListCredentialAuthorizationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveCredentialAuthorizationEndpoint = {};
type OrgsRemoveCredentialAuthorizationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForOrgEndpoint = {};
type ActivityListPublicEventsForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListHooksEndpoint = {};
type OrgsListHooksRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCreateHookEndpoint = {};
type OrgsCreateHookRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetHookEndpoint = {};
type OrgsGetHookRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdateHookEndpoint = {};
type OrgsUpdateHookRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsDeleteHookEndpoint = {};
type OrgsDeleteHookRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsPingHookEndpoint = {};
type OrgsPingHookRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetOrgInstallationEndpoint = {};
type AppsGetOrgInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindOrgInstallationEndpoint = {};
type AppsFindOrgInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsGetRestrictionsForOrgEndpoint = {};
type InteractionsGetRestrictionsForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsAddOrUpdateRestrictionsForOrgEndpoint = {};
type InteractionsAddOrUpdateRestrictionsForOrgRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsRemoveRestrictionsForOrgEndpoint = {};
type InteractionsRemoveRestrictionsForOrgRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListPendingInvitationsEndpoint = {};
type OrgsListPendingInvitationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCreateInvitationEndpoint = {};
type OrgsCreateInvitationRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListInvitationTeamsEndpoint = {};
type OrgsListInvitationTeamsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForOrgEndpoint = {};
type IssuesListForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListMembersEndpoint = {};
type OrgsListMembersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckMembershipEndpoint = {};
type OrgsCheckMembershipRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveMemberEndpoint = {};
type OrgsRemoveMemberRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetMembershipEndpoint = {};
type OrgsGetMembershipRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsAddOrUpdateMembershipEndpoint = {};
type OrgsAddOrUpdateMembershipRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveMembershipEndpoint = {};
type OrgsRemoveMembershipRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartForOrgEndpoint = {};
type MigrationsStartForOrgRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsListForOrgEndpoint = {};
type MigrationsListForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetStatusForOrgEndpoint = {};
type MigrationsGetStatusForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetArchiveForOrgEndpoint = {};
type MigrationsGetArchiveForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsDeleteArchiveForOrgEndpoint = {};
type MigrationsDeleteArchiveForOrgRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUnlockRepoForOrgEndpoint = {};
type MigrationsUnlockRepoForOrgRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListOutsideCollaboratorsEndpoint = {};
type OrgsListOutsideCollaboratorsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveOutsideCollaboratorEndpoint = {};
type OrgsRemoveOutsideCollaboratorRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsConvertMemberToOutsideCollaboratorEndpoint = {};
type OrgsConvertMemberToOutsideCollaboratorRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForOrgEndpoint = {};
type ProjectsListForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForOrgEndpoint = {};
type ProjectsCreateForOrgRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListPublicMembersEndpoint = {};
type OrgsListPublicMembersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckPublicMembershipEndpoint = {};
type OrgsCheckPublicMembershipRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsPublicizeMembershipEndpoint = {};
type OrgsPublicizeMembershipRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsConcealMembershipEndpoint = {};
type OrgsConcealMembershipRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForOrgEndpoint = {};
type ReposListForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateInOrgEndpoint = {};
type ReposCreateInOrgRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListIdPGroupsForOrgEndpoint = {};
type TeamsListIdPGroupsForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListEndpoint = {};
type TeamsListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateEndpoint = {};
type TeamsCreateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetByNameEndpoint = {};
type TeamsGetByNameRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGetCardEndpoint = {};
type ProjectsGetCardRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdateCardEndpoint = {};
type ProjectsUpdateCardRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDeleteCardEndpoint = {};
type ProjectsDeleteCardRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsMoveCardEndpoint = {};
type ProjectsMoveCardRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGetColumnEndpoint = {};
type ProjectsGetColumnRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdateColumnEndpoint = {};
type ProjectsUpdateColumnRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDeleteColumnEndpoint = {};
type ProjectsDeleteColumnRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListCardsEndpoint = {};
type ProjectsListCardsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateCardEndpoint = {};
type ProjectsCreateCardRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsMoveColumnEndpoint = {};
type ProjectsMoveColumnRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGetEndpoint = {};
type ProjectsGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdateEndpoint = {};
type ProjectsUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDeleteEndpoint = {};
type ProjectsDeleteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListCollaboratorsEndpoint = {};
type ProjectsListCollaboratorsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsAddCollaboratorEndpoint = {};
type ProjectsAddCollaboratorRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsRemoveCollaboratorEndpoint = {};
type ProjectsRemoveCollaboratorRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsReviewUserPermissionLevelEndpoint = {};
type ProjectsReviewUserPermissionLevelRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListColumnsEndpoint = {};
type ProjectsListColumnsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateColumnEndpoint = {};
type ProjectsCreateColumnRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type RateLimitGetEndpoint = {};
type RateLimitGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsDeleteEndpoint = {};
type ReactionsDeleteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetEndpoint = {};
type ReposGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateEndpoint = {};
type ReposUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteEndpoint = {};
type ReposDeleteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListAssigneesEndpoint = {};
type IssuesListAssigneesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCheckAssigneeEndpoint = {};
type IssuesCheckAssigneeRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposEnableAutomatedSecurityFixesEndpoint = {};
type ReposEnableAutomatedSecurityFixesRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDisableAutomatedSecurityFixesEndpoint = {};
type ReposDisableAutomatedSecurityFixesRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListBranchesEndpoint = {};
type ReposListBranchesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetBranchEndpoint = {};
type ReposGetBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetBranchProtectionEndpoint = {};
type ReposGetBranchProtectionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateBranchProtectionEndpoint = {};
type ReposUpdateBranchProtectionRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveBranchProtectionEndpoint = {};
type ReposRemoveBranchProtectionRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchAdminEnforcementEndpoint = {};
type ReposGetProtectedBranchAdminEnforcementRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchAdminEnforcementEndpoint = {};
type ReposAddProtectedBranchAdminEnforcementRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchAdminEnforcementEndpoint = {};
type ReposRemoveProtectedBranchAdminEnforcementRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchPullRequestReviewEnforcementEndpoint = {};
type ReposGetProtectedBranchPullRequestReviewEnforcementRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateProtectedBranchPullRequestReviewEnforcementEndpoint = {};
type ReposUpdateProtectedBranchPullRequestReviewEnforcementRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchPullRequestReviewEnforcementEndpoint = {};
type ReposRemoveProtectedBranchPullRequestReviewEnforcementRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRequiredSignaturesEndpoint = {};
type ReposGetProtectedBranchRequiredSignaturesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchRequiredSignaturesEndpoint = {};
type ReposAddProtectedBranchRequiredSignaturesRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredSignaturesEndpoint = {};
type ReposRemoveProtectedBranchRequiredSignaturesRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRequiredStatusChecksEndpoint = {};
type ReposGetProtectedBranchRequiredStatusChecksRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateProtectedBranchRequiredStatusChecksEndpoint = {};
type ReposUpdateProtectedBranchRequiredStatusChecksRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredStatusChecksEndpoint = {};
type ReposRemoveProtectedBranchRequiredStatusChecksRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchRequiredStatusChecksContextsEndpoint = {};
type ReposListProtectedBranchRequiredStatusChecksContextsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchRequiredStatusChecksContextsEndpoint = {};
type ReposReplaceProtectedBranchRequiredStatusChecksContextsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchRequiredStatusChecksContextsEndpoint = {};
type ReposAddProtectedBranchRequiredStatusChecksContextsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredStatusChecksContextsEndpoint = {};
type ReposRemoveProtectedBranchRequiredStatusChecksContextsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRestrictionsEndpoint = {};
type ReposGetProtectedBranchRestrictionsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRestrictionsEndpoint = {};
type ReposRemoveProtectedBranchRestrictionsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetAppsWithAccessToProtectedBranchEndpoint = {};
type ReposGetAppsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListAppsWithAccessToProtectedBranchEndpoint = {};
type ReposListAppsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchAppRestrictionsEndpoint = {};
type ReposReplaceProtectedBranchAppRestrictionsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchAppRestrictionsEndpoint = {};
type ReposAddProtectedBranchAppRestrictionsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchAppRestrictionsEndpoint = {};
type ReposRemoveProtectedBranchAppRestrictionsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetTeamsWithAccessToProtectedBranchEndpoint = {};
type ReposGetTeamsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchTeamRestrictionsEndpoint = {};
type ReposListProtectedBranchTeamRestrictionsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTeamsWithAccessToProtectedBranchEndpoint = {};
type ReposListTeamsWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchTeamRestrictionsEndpoint = {};
type ReposReplaceProtectedBranchTeamRestrictionsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchTeamRestrictionsEndpoint = {};
type ReposAddProtectedBranchTeamRestrictionsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchTeamRestrictionsEndpoint = {};
type ReposRemoveProtectedBranchTeamRestrictionsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetUsersWithAccessToProtectedBranchEndpoint = {};
type ReposGetUsersWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchUserRestrictionsEndpoint = {};
type ReposListProtectedBranchUserRestrictionsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListUsersWithAccessToProtectedBranchEndpoint = {};
type ReposListUsersWithAccessToProtectedBranchRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchUserRestrictionsEndpoint = {};
type ReposReplaceProtectedBranchUserRestrictionsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchUserRestrictionsEndpoint = {};
type ReposAddProtectedBranchUserRestrictionsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchUserRestrictionsEndpoint = {};
type ReposRemoveProtectedBranchUserRestrictionsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksCreateEndpoint = {};
type ChecksCreateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksUpdateEndpoint = {};
type ChecksUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksGetEndpoint = {};
type ChecksGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListAnnotationsEndpoint = {};
type ChecksListAnnotationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksCreateSuiteEndpoint = {};
type ChecksCreateSuiteRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksSetSuitesPreferencesEndpoint = {};
type ChecksSetSuitesPreferencesRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksGetSuiteEndpoint = {};
type ChecksGetSuiteRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListForSuiteEndpoint = {};
type ChecksListForSuiteRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksRerequestSuiteEndpoint = {};
type ChecksRerequestSuiteRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCollaboratorsEndpoint = {};
type ReposListCollaboratorsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCheckCollaboratorEndpoint = {};
type ReposCheckCollaboratorRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddCollaboratorEndpoint = {};
type ReposAddCollaboratorRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveCollaboratorEndpoint = {};
type ReposRemoveCollaboratorRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCollaboratorPermissionLevelEndpoint = {};
type ReposGetCollaboratorPermissionLevelRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommitCommentsEndpoint = {};
type ReposListCommitCommentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitCommentEndpoint = {};
type ReposGetCommitCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateCommitCommentEndpoint = {};
type ReposUpdateCommitCommentRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteCommitCommentEndpoint = {};
type ReposDeleteCommitCommentRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForCommitCommentEndpoint = {};
type ReactionsListForCommitCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForCommitCommentEndpoint = {};
type ReactionsCreateForCommitCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommitsEndpoint = {};
type ReposListCommitsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListBranchesForHeadCommitEndpoint = {};
type ReposListBranchesForHeadCommitRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommentsForCommitEndpoint = {};
type ReposListCommentsForCommitRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateCommitCommentEndpoint = {};
type ReposCreateCommitCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPullRequestsAssociatedWithCommitEndpoint = {};
type ReposListPullRequestsAssociatedWithCommitRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitEndpoint = {};
type ReposGetCommitRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListForRefEndpoint = {};
type ChecksListForRefRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListSuitesForRefEndpoint = {};
type ChecksListSuitesForRefRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCombinedStatusForRefEndpoint = {};
type ReposGetCombinedStatusForRefRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListStatusesForRefEndpoint = {};
type ReposListStatusesForRefRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductGetForRepoEndpoint = {};
type CodesOfConductGetForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRetrieveCommunityProfileMetricsEndpoint = {};
type ReposRetrieveCommunityProfileMetricsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCompareCommitsEndpoint = {};
type ReposCompareCommitsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetContentsEndpoint = {};
type ReposGetContentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateOrUpdateFileEndpoint = {};
type ReposCreateOrUpdateFileRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateFileEndpoint = {};
type ReposCreateFileRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateFileEndpoint = {};
type ReposUpdateFileRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteFileEndpoint = {};
type ReposDeleteFileRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListContributorsEndpoint = {};
type ReposListContributorsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeploymentsEndpoint = {};
type ReposListDeploymentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateDeploymentEndpoint = {};
type ReposCreateDeploymentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeploymentEndpoint = {};
type ReposGetDeploymentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeploymentStatusesEndpoint = {};
type ReposListDeploymentStatusesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateDeploymentStatusEndpoint = {};
type ReposCreateDeploymentStatusRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeploymentStatusEndpoint = {};
type ReposGetDeploymentStatusRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateDispatchEventEndpoint = {};
type ReposCreateDispatchEventRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDownloadsEndpoint = {};
type ReposListDownloadsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDownloadEndpoint = {};
type ReposGetDownloadRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteDownloadEndpoint = {};
type ReposDeleteDownloadRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListRepoEventsEndpoint = {};
type ActivityListRepoEventsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForksEndpoint = {};
type ReposListForksRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateForkEndpoint = {};
type ReposCreateForkRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateBlobEndpoint = {};
type GitCreateBlobRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetBlobEndpoint = {};
type GitGetBlobRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateCommitEndpoint = {};
type GitCreateCommitRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetCommitEndpoint = {};
type GitGetCommitRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitListMatchingRefsEndpoint = {};
type GitListMatchingRefsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetRefEndpoint = {};
type GitGetRefRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateRefEndpoint = {};
type GitCreateRefRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitUpdateRefEndpoint = {};
type GitUpdateRefRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitDeleteRefEndpoint = {};
type GitDeleteRefRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateTagEndpoint = {};
type GitCreateTagRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetTagEndpoint = {};
type GitGetTagRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateTreeEndpoint = {};
type GitCreateTreeRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetTreeEndpoint = {};
type GitGetTreeRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListHooksEndpoint = {};
type ReposListHooksRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateHookEndpoint = {};
type ReposCreateHookRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetHookEndpoint = {};
type ReposGetHookRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateHookEndpoint = {};
type ReposUpdateHookRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteHookEndpoint = {};
type ReposDeleteHookRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposPingHookEndpoint = {};
type ReposPingHookRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposTestPushHookEndpoint = {};
type ReposTestPushHookRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartImportEndpoint = {};
type MigrationsStartImportRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetImportProgressEndpoint = {};
type MigrationsGetImportProgressRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUpdateImportEndpoint = {};
type MigrationsUpdateImportRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsCancelImportEndpoint = {};
type MigrationsCancelImportRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetCommitAuthorsEndpoint = {};
type MigrationsGetCommitAuthorsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsMapCommitAuthorEndpoint = {};
type MigrationsMapCommitAuthorRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetLargeFilesEndpoint = {};
type MigrationsGetLargeFilesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsSetLfsPreferenceEndpoint = {};
type MigrationsSetLfsPreferenceRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetRepoInstallationEndpoint = {};
type AppsGetRepoInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindRepoInstallationEndpoint = {};
type AppsFindRepoInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsGetRestrictionsForRepoEndpoint = {};
type InteractionsGetRestrictionsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsAddOrUpdateRestrictionsForRepoEndpoint = {};
type InteractionsAddOrUpdateRestrictionsForRepoRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsRemoveRestrictionsForRepoEndpoint = {};
type InteractionsRemoveRestrictionsForRepoRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListInvitationsEndpoint = {};
type ReposListInvitationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteInvitationEndpoint = {};
type ReposDeleteInvitationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateInvitationEndpoint = {};
type ReposUpdateInvitationRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForRepoEndpoint = {};
type IssuesListForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateEndpoint = {};
type IssuesCreateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListCommentsForRepoEndpoint = {};
type IssuesListCommentsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetCommentEndpoint = {};
type IssuesGetCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateCommentEndpoint = {};
type IssuesUpdateCommentRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteCommentEndpoint = {};
type IssuesDeleteCommentRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForIssueCommentEndpoint = {};
type ReactionsListForIssueCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForIssueCommentEndpoint = {};
type ReactionsCreateForIssueCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEventsForRepoEndpoint = {};
type IssuesListEventsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetEventEndpoint = {};
type IssuesGetEventRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetEndpoint = {};
type IssuesGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateEndpoint = {};
type IssuesUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesAddAssigneesEndpoint = {};
type IssuesAddAssigneesRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveAssigneesEndpoint = {};
type IssuesRemoveAssigneesRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListCommentsEndpoint = {};
type IssuesListCommentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateCommentEndpoint = {};
type IssuesCreateCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEventsEndpoint = {};
type IssuesListEventsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsOnIssueEndpoint = {};
type IssuesListLabelsOnIssueRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesAddLabelsEndpoint = {};
type IssuesAddLabelsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesReplaceLabelsEndpoint = {};
type IssuesReplaceLabelsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveLabelsEndpoint = {};
type IssuesRemoveLabelsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveLabelEndpoint = {};
type IssuesRemoveLabelRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesLockEndpoint = {};
type IssuesLockRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUnlockEndpoint = {};
type IssuesUnlockRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForIssueEndpoint = {};
type ReactionsListForIssueRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForIssueEndpoint = {};
type ReactionsCreateForIssueRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEventsForTimelineEndpoint = {};
type IssuesListEventsForTimelineRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeployKeysEndpoint = {};
type ReposListDeployKeysRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddDeployKeyEndpoint = {};
type ReposAddDeployKeyRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeployKeyEndpoint = {};
type ReposGetDeployKeyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveDeployKeyEndpoint = {};
type ReposRemoveDeployKeyRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsForRepoEndpoint = {};
type IssuesListLabelsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateLabelEndpoint = {};
type IssuesCreateLabelRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetLabelEndpoint = {};
type IssuesGetLabelRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateLabelEndpoint = {};
type IssuesUpdateLabelRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteLabelEndpoint = {};
type IssuesDeleteLabelRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListLanguagesEndpoint = {};
type ReposListLanguagesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesGetForRepoEndpoint = {};
type LicensesGetForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposMergeEndpoint = {};
type ReposMergeRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListMilestonesForRepoEndpoint = {};
type IssuesListMilestonesForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateMilestoneEndpoint = {};
type IssuesCreateMilestoneRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetMilestoneEndpoint = {};
type IssuesGetMilestoneRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateMilestoneEndpoint = {};
type IssuesUpdateMilestoneRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteMilestoneEndpoint = {};
type IssuesDeleteMilestoneRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsForMilestoneEndpoint = {};
type IssuesListLabelsForMilestoneRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListNotificationsForRepoEndpoint = {};
type ActivityListNotificationsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkNotificationsAsReadForRepoEndpoint = {};
type ActivityMarkNotificationsAsReadForRepoRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPagesEndpoint = {};
type ReposGetPagesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposEnablePagesSiteEndpoint = {};
type ReposEnablePagesSiteRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDisablePagesSiteEndpoint = {};
type ReposDisablePagesSiteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateInformationAboutPagesSiteEndpoint = {};
type ReposUpdateInformationAboutPagesSiteRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRequestPageBuildEndpoint = {};
type ReposRequestPageBuildRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPagesBuildsEndpoint = {};
type ReposListPagesBuildsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetLatestPagesBuildEndpoint = {};
type ReposGetLatestPagesBuildRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPagesBuildEndpoint = {};
type ReposGetPagesBuildRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForRepoEndpoint = {};
type ProjectsListForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForRepoEndpoint = {};
type ProjectsCreateForRepoRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListEndpoint = {};
type PullsListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateEndpoint = {};
type PullsCreateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListCommentsForRepoEndpoint = {};
type PullsListCommentsForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetCommentEndpoint = {};
type PullsGetCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateCommentEndpoint = {};
type PullsUpdateCommentRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeleteCommentEndpoint = {};
type PullsDeleteCommentRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForPullRequestReviewCommentEndpoint = {};
type ReactionsListForPullRequestReviewCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForPullRequestReviewCommentEndpoint = {};
type ReactionsCreateForPullRequestReviewCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetEndpoint = {};
type PullsGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateEndpoint = {};
type PullsUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListCommentsEndpoint = {};
type PullsListCommentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateCommentEndpoint = {};
type PullsCreateCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateCommentReplyEndpoint = {};
type PullsCreateCommentReplyRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateReviewCommentReplyEndpoint = {};
type PullsCreateReviewCommentReplyRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListCommitsEndpoint = {};
type PullsListCommitsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListFilesEndpoint = {};
type PullsListFilesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCheckIfMergedEndpoint = {};
type PullsCheckIfMergedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsMergeEndpoint = {};
type PullsMergeRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListReviewRequestsEndpoint = {};
type PullsListReviewRequestsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateReviewRequestEndpoint = {};
type PullsCreateReviewRequestRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeleteReviewRequestEndpoint = {};
type PullsDeleteReviewRequestRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListReviewsEndpoint = {};
type PullsListReviewsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateReviewEndpoint = {};
type PullsCreateReviewRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetReviewEndpoint = {};
type PullsGetReviewRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeletePendingReviewEndpoint = {};
type PullsDeletePendingReviewRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateReviewEndpoint = {};
type PullsUpdateReviewRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetCommentsForReviewEndpoint = {};
type PullsGetCommentsForReviewRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDismissReviewEndpoint = {};
type PullsDismissReviewRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsSubmitReviewEndpoint = {};
type PullsSubmitReviewRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateBranchEndpoint = {};
type PullsUpdateBranchRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReadmeEndpoint = {};
type ReposGetReadmeRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListReleasesEndpoint = {};
type ReposListReleasesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateReleaseEndpoint = {};
type ReposCreateReleaseRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReleaseAssetEndpoint = {};
type ReposGetReleaseAssetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateReleaseAssetEndpoint = {};
type ReposUpdateReleaseAssetRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteReleaseAssetEndpoint = {};
type ReposDeleteReleaseAssetRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetLatestReleaseEndpoint = {};
type ReposGetLatestReleaseRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReleaseByTagEndpoint = {};
type ReposGetReleaseByTagRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReleaseEndpoint = {};
type ReposGetReleaseRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateReleaseEndpoint = {};
type ReposUpdateReleaseRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteReleaseEndpoint = {};
type ReposDeleteReleaseRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListAssetsForReleaseEndpoint = {};
type ReposListAssetsForReleaseRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListStargazersForRepoEndpoint = {};
type ActivityListStargazersForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCodeFrequencyStatsEndpoint = {};
type ReposGetCodeFrequencyStatsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitActivityStatsEndpoint = {};
type ReposGetCommitActivityStatsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetContributorsStatsEndpoint = {};
type ReposGetContributorsStatsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetParticipationStatsEndpoint = {};
type ReposGetParticipationStatsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPunchCardStatsEndpoint = {};
type ReposGetPunchCardStatsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateStatusEndpoint = {};
type ReposCreateStatusRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListWatchersForRepoEndpoint = {};
type ActivityListWatchersForRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetRepoSubscriptionEndpoint = {};
type ActivityGetRepoSubscriptionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivitySetRepoSubscriptionEndpoint = {};
type ActivitySetRepoSubscriptionRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityDeleteRepoSubscriptionEndpoint = {};
type ActivityDeleteRepoSubscriptionRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTagsEndpoint = {};
type ReposListTagsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTeamsEndpoint = {};
type ReposListTeamsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTopicsEndpoint = {};
type ReposListTopicsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceTopicsEndpoint = {};
type ReposReplaceTopicsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetClonesEndpoint = {};
type ReposGetClonesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetTopPathsEndpoint = {};
type ReposGetTopPathsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetTopReferrersEndpoint = {};
type ReposGetTopReferrersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetViewsEndpoint = {};
type ReposGetViewsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposTransferEndpoint = {};
type ReposTransferRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCheckVulnerabilityAlertsEndpoint = {};
type ReposCheckVulnerabilityAlertsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposEnableVulnerabilityAlertsEndpoint = {};
type ReposEnableVulnerabilityAlertsRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDisableVulnerabilityAlertsEndpoint = {};
type ReposDisableVulnerabilityAlertsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetArchiveLinkEndpoint = {};
type ReposGetArchiveLinkRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateUsingTemplateEndpoint = {};
type ReposCreateUsingTemplateRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPublicEndpoint = {};
type ReposListPublicRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimListProvisionedIdentitiesEndpoint = {};
type ScimListProvisionedIdentitiesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimProvisionAndInviteUsersEndpoint = {};
type ScimProvisionAndInviteUsersRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimProvisionInviteUsersEndpoint = {};
type ScimProvisionInviteUsersRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimGetProvisioningDetailsForUserEndpoint = {};
type ScimGetProvisioningDetailsForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimReplaceProvisionedUserInformationEndpoint = {};
type ScimReplaceProvisionedUserInformationRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimUpdateProvisionedOrgMembershipEndpoint = {};
type ScimUpdateProvisionedOrgMembershipRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimUpdateUserAttributeEndpoint = {};
type ScimUpdateUserAttributeRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimRemoveUserFromOrgEndpoint = {};
type ScimRemoveUserFromOrgRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchCodeEndpoint = {};
type SearchCodeRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchCommitsEndpoint = {};
type SearchCommitsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssuesAndPullRequestsEndpoint = {};
type SearchIssuesAndPullRequestsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssuesEndpoint = {};
type SearchIssuesRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchLabelsEndpoint = {};
type SearchLabelsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchReposEndpoint = {};
type SearchReposRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchTopicsEndpoint = {};
type SearchTopicsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchUsersEndpoint = {};
type SearchUsersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetEndpoint = {};
type TeamsGetRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdateEndpoint = {};
type TeamsUpdateRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDeleteEndpoint = {};
type TeamsDeleteRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListDiscussionsEndpoint = {};
type TeamsListDiscussionsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateDiscussionEndpoint = {};
type TeamsCreateDiscussionRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetDiscussionEndpoint = {};
type TeamsGetDiscussionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdateDiscussionEndpoint = {};
type TeamsUpdateDiscussionRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDeleteDiscussionEndpoint = {};
type TeamsDeleteDiscussionRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListDiscussionCommentsEndpoint = {};
type TeamsListDiscussionCommentsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateDiscussionCommentEndpoint = {};
type TeamsCreateDiscussionCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetDiscussionCommentEndpoint = {};
type TeamsGetDiscussionCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdateDiscussionCommentEndpoint = {};
type TeamsUpdateDiscussionCommentRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDeleteDiscussionCommentEndpoint = {};
type TeamsDeleteDiscussionCommentRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForTeamDiscussionCommentEndpoint = {};
type ReactionsListForTeamDiscussionCommentRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForTeamDiscussionCommentEndpoint = {};
type ReactionsCreateForTeamDiscussionCommentRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForTeamDiscussionEndpoint = {};
type ReactionsListForTeamDiscussionRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForTeamDiscussionEndpoint = {};
type ReactionsCreateForTeamDiscussionRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListPendingInvitationsEndpoint = {};
type TeamsListPendingInvitationsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListMembersEndpoint = {};
type TeamsListMembersRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetMemberEndpoint = {};
type TeamsGetMemberRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddMemberEndpoint = {};
type TeamsAddMemberRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveMemberEndpoint = {};
type TeamsRemoveMemberRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetMembershipEndpoint = {};
type TeamsGetMembershipRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateMembershipEndpoint = {};
type TeamsAddOrUpdateMembershipRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveMembershipEndpoint = {};
type TeamsRemoveMembershipRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListProjectsEndpoint = {};
type TeamsListProjectsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsReviewProjectEndpoint = {};
type TeamsReviewProjectRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateProjectEndpoint = {};
type TeamsAddOrUpdateProjectRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveProjectEndpoint = {};
type TeamsRemoveProjectRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListReposEndpoint = {};
type TeamsListReposRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCheckManagesRepoEndpoint = {};
type TeamsCheckManagesRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateRepoEndpoint = {};
type TeamsAddOrUpdateRepoRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveRepoEndpoint = {};
type TeamsRemoveRepoRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListIdPGroupsEndpoint = {};
type TeamsListIdPGroupsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateOrUpdateIdPGroupConnectionsEndpoint = {};
type TeamsCreateOrUpdateIdPGroupConnectionsRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListChildEndpoint = {};
type TeamsListChildRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetAuthenticatedEndpoint = {};
type UsersGetAuthenticatedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUpdateAuthenticatedEndpoint = {};
type UsersUpdateAuthenticatedRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListBlockedEndpoint = {};
type UsersListBlockedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckBlockedEndpoint = {};
type UsersCheckBlockedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersBlockEndpoint = {};
type UsersBlockRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUnblockEndpoint = {};
type UsersUnblockRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersTogglePrimaryEmailVisibilityEndpoint = {};
type UsersTogglePrimaryEmailVisibilityRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListEmailsEndpoint = {};
type UsersListEmailsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersAddEmailsEndpoint = {};
type UsersAddEmailsRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeleteEmailsEndpoint = {};
type UsersDeleteEmailsRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowersForAuthenticatedUserEndpoint = {};
type UsersListFollowersForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowingForAuthenticatedUserEndpoint = {};
type UsersListFollowingForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckFollowingEndpoint = {};
type UsersCheckFollowingRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersFollowEndpoint = {};
type UsersFollowRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUnfollowEndpoint = {};
type UsersUnfollowRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListGpgKeysEndpoint = {};
type UsersListGpgKeysRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCreateGpgKeyEndpoint = {};
type UsersCreateGpgKeyRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetGpgKeyEndpoint = {};
type UsersGetGpgKeyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeleteGpgKeyEndpoint = {};
type UsersDeleteGpgKeyRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallationsForAuthenticatedUserEndpoint = {};
type AppsListInstallationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallationReposForAuthenticatedUserEndpoint = {};
type AppsListInstallationReposForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsAddRepoToInstallationEndpoint = {};
type AppsAddRepoToInstallationRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsRemoveRepoFromInstallationEndpoint = {};
type AppsRemoveRepoFromInstallationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForAuthenticatedUserEndpoint = {};
type IssuesListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicKeysEndpoint = {};
type UsersListPublicKeysRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCreatePublicKeyEndpoint = {};
type UsersCreatePublicKeyRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetPublicKeyEndpoint = {};
type UsersGetPublicKeyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeletePublicKeyEndpoint = {};
type UsersDeletePublicKeyRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListMarketplacePurchasesForAuthenticatedUserEndpoint = {};
type AppsListMarketplacePurchasesForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListMarketplacePurchasesForAuthenticatedUserStubbedEndpoint = {};
type AppsListMarketplacePurchasesForAuthenticatedUserStubbedRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListMembershipsEndpoint = {};
type OrgsListMembershipsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetMembershipForAuthenticatedUserEndpoint = {};
type OrgsGetMembershipForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdateMembershipEndpoint = {};
type OrgsUpdateMembershipRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartForAuthenticatedUserEndpoint = {};
type MigrationsStartForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsListForAuthenticatedUserEndpoint = {};
type MigrationsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetStatusForAuthenticatedUserEndpoint = {};
type MigrationsGetStatusForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetArchiveForAuthenticatedUserEndpoint = {};
type MigrationsGetArchiveForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsDeleteArchiveForAuthenticatedUserEndpoint = {};
type MigrationsDeleteArchiveForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUnlockRepoForAuthenticatedUserEndpoint = {};
type MigrationsUnlockRepoForAuthenticatedUserRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListForAuthenticatedUserEndpoint = {};
type OrgsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForAuthenticatedUserEndpoint = {};
type ProjectsCreateForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicEmailsEndpoint = {};
type UsersListPublicEmailsRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListEndpoint = {};
type ReposListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateForAuthenticatedUserEndpoint = {};
type ReposCreateForAuthenticatedUserRequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListInvitationsForAuthenticatedUserEndpoint = {};
type ReposListInvitationsForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAcceptInvitationEndpoint = {};
type ReposAcceptInvitationRequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeclineInvitationEndpoint = {};
type ReposDeclineInvitationRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposStarredByAuthenticatedUserEndpoint = {};
type ActivityListReposStarredByAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityCheckStarringRepoEndpoint = {};
type ActivityCheckStarringRepoRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityStarRepoEndpoint = {};
type ActivityStarRepoRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityUnstarRepoEndpoint = {};
type ActivityUnstarRepoRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListWatchedReposForAuthenticatedUserEndpoint = {};
type ActivityListWatchedReposForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityCheckWatchingRepoLegacyEndpoint = {};
type ActivityCheckWatchingRepoLegacyRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityWatchRepoLegacyEndpoint = {};
type ActivityWatchRepoLegacyRequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityStopWatchingRepoLegacyEndpoint = {};
type ActivityStopWatchingRepoLegacyRequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListForAuthenticatedUserEndpoint = {};
type TeamsListForAuthenticatedUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListEndpoint = {};
type UsersListRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetByUsernameEndpoint = {};
type UsersGetByUsernameRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListEventsForUserEndpoint = {};
type ActivityListEventsForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListEventsForOrgEndpoint = {};
type ActivityListEventsForOrgRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForUserEndpoint = {};
type ActivityListPublicEventsForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowersForUserEndpoint = {};
type UsersListFollowersForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowingForUserEndpoint = {};
type UsersListFollowingForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckFollowingForUserEndpoint = {};
type UsersCheckFollowingForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListPublicForUserEndpoint = {};
type GistsListPublicForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListGpgKeysForUserEndpoint = {};
type UsersListGpgKeysForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetContextForUserEndpoint = {};
type UsersGetContextForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetUserInstallationEndpoint = {};
type AppsGetUserInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindUserInstallationEndpoint = {};
type AppsFindUserInstallationRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicKeysForUserEndpoint = {};
type UsersListPublicKeysForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListForUserEndpoint = {};
type OrgsListForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForUserEndpoint = {};
type ProjectsListForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReceivedEventsForUserEndpoint = {};
type ActivityListReceivedEventsForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReceivedPublicEventsForUserEndpoint = {};
type ActivityListReceivedPublicEventsForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForUserEndpoint = {};
type ReposListForUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposStarredByUserEndpoint = {};
type ActivityListReposStarredByUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposWatchedByUserEndpoint = {};
type ActivityListReposWatchedByUserRequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
